/*
Navicat MySQL Data Transfer

Source Server         : localhost_for_mysql
Source Server Version : 50715
Source Host           : localhost:3306
Source Database       : glory

Target Server Type    : MYSQL
Target Server Version : 50715
File Encoding         : 65001

Date: 2017-12-19 18:05:55
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for t_acl
-- ----------------------------
DROP TABLE IF EXISTS `t_acl`;
CREATE TABLE `t_acl` (
  `role_id` int(11) NOT NULL COMMENT '角色id',
  `childmodule_id` int(11) NOT NULL COMMENT '子模块id',
  PRIMARY KEY (`role_id`,`childmodule_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of t_acl
-- ----------------------------

-- ----------------------------
-- Table structure for t_activity
-- ----------------------------
DROP TABLE IF EXISTS `t_activity`;
CREATE TABLE `t_activity` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '记录时间',
  `name` varchar(20) COLLATE utf8_unicode_ci NOT NULL,
  `start_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP COMMENT '活动开始时间',
  `end_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of t_activity
-- ----------------------------

-- ----------------------------
-- Table structure for t_article
-- ----------------------------
DROP TABLE IF EXISTS `t_article`;
CREATE TABLE `t_article` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '文章id',
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `content` text COLLATE utf8_unicode_ci NOT NULL COMMENT '文章内容',
  `create_at` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `user_id` int(11) DEFAULT NULL,
  `role_id` int(11) NOT NULL COMMENT '基于角色权限级别',
  PRIMARY KEY (`id`),
  KEY `PK_USERID` (`user_id`),
  CONSTRAINT `PK_USERID` FOREIGN KEY (`user_id`) REFERENCES `t_users` (`id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of t_article
-- ----------------------------
INSERT INTO `t_article` VALUES ('18', '访问控   制列表 ACL（Access Control Lists ACL） ', '<p>Phalcon在权限方面通过 :doc:<code>Phalcon\\Acl &lt;../api/Phalcon_Acl&gt;</code> 提供了一个轻量级的 ACL(访问控制列表). Access Control Lists (ACL) 允许系统对用户的访问权限进行控制，比如允许访问某些资源而不允许访问其它资源等。 这里我们建议开发者了解一些关于ACL的技术。</p><br><p>ACL有两部分组成即角色和资源。 资源即是ACL定义的权限所依附的对象。 角色即是ACL所字义的请求者的身份，ACL决定了角色对资源的访问权限，允许访问或拒绝访问。</p><br><p><strong>创建 ACL（Creating an ACL）</strong></p><br><p>这个组件起先是设计工作在内存中的， 这样做提供了更高的访问速度。 :doc:<code>Phalcon\\Acl &lt;../api/Phalcon_Acl&gt;</code> 构造器的第一个参数用于设置取得ACL的方式。 下面是使用内存适配器的例子：</p><br><blockquote><br><p>&lt;?php</p><br><p>use Phalcon\\Acl\\Adapter\\Memory as AclList;</p><br><p>$acl = new AclList();<br>默认情况下 :doc:<code>Phalcon\\Acl &lt;../api/Phalcon_Acl&gt;</code> 允许我们访问未定义的资源中的action，为了提高安全性， 我们设置默认访问级别为‘拒绝’。</p><br></blockquote><br><p>&lt;?php</p><br><p>use Phalcon\\Acl;</p><br><p>// 设置默认访问级别为拒绝<br>$acl-&gt;setDefaultAction(<br>    Acl::DENY<br>);<br>添加角色（Adding Roles to the ACL）</p><br><p>角色即是权限的集合体，其中定义了我们对资源的访问权限。 例如， 我们会把一个组织内的不同的人定义为不同的角色。 The :doc:<code>Phalcon\\Acl\\Role &lt;../api/Phalcon_Acl_Role&gt;</code> 类使用一种更有组织的方式来定义角色。 这里我们创建一些角色：</p><br><p>&lt;?php</p><br><p>use Phalcon\\Acl\\Role;</p><br><p>// 创建角色<br>// The first parameter is the name, the second parameter is an optional description.<br>$roleAdmins = new Role(&quot;Administrators&quot;, &quot;Super-User role&quot;);<br>$roleGuests = new Role(&quot;Guests&quot;);</p><br><p>// 添加 &quot;Guests&quot; 角色到ACL<br>$acl-&gt;addRole($roleGuests);</p><br><p>// 添加&quot;Designers&quot;到ACL, 仅使用此字符串。<br>$acl-&gt;addRole(&quot;Designers&quot;);<br>上面我们看到，我们可以直接使用字符串来定义角色。</p><br><p>添加资源（Adding Resources）</p><br><p>资源即是访问控制要控制的对象之一。 正常情况下在mvc中资源一般是控制器。 Phalcon中我们使用 :doc:<code>Phalcon\\Acl\\Resource &lt;../api/Phalcon_Acl_Resource&gt;</code> 来定义资源。 非常重要的一点即是我们把相关的action或操作添加到资源中这样ACL才知道控制什么资源。</p><br><p>&lt;?php</p><br><p>use Phalcon\\Acl\\Resource;</p><br><p>// 定义 &quot;Customers&quot; 资源<br>$customersResource = new Resource(&quot;Customers&quot;);</p><br><p>// 为 &quot;customers&quot;资源添加一组操作</p><br><p>$acl-&gt;addResource(<br>    $customersResource,<br>    &quot;search&quot;<br>);</p><br><p>$acl-&gt;addResource(<br>    $customersResource,<br>    [<br>        &quot;create&quot;,<br>        &quot;update&quot;,<br>    ]<br>);<br>定义访问控制（Defining Access Controls）</p><br><p>至此我们定义了角色及资源， 现在是定义ACL的时候了，即是定义角色对资源的访问。 这个部分是极其重要的，特别是在我们设定了默认的访问级别后。</p><br><p>&lt;?php</p><br><p>// 设置角色对资源的访问级别<br>$acl-&gt;allow(&quot;Guests&quot;, &quot;Customers&quot;, &quot;search&quot;);</p><br><p>$acl-&gt;allow(&quot;Guests&quot;, &quot;Customers&quot;, &quot;create&quot;);</p><br><p>$acl-&gt;deny(&quot;Guests&quot;, &quot;Customers&quot;, &quot;update&quot;);<br>allow()方法指定了允许角色对资源的访问， deny()方法则反之。</p><br><p>查询 ACL（Querying an ACL）</p><br><p>一旦访问控制表定义之后， 我们就可以通过它来检查角色是否有访问权限了。</p><br><p>&lt;?php</p><br><p>// 查询角色是否有访问权限</p><br><p>// Returns 0<br>$acl-&gt;isAllowed(&quot;Guests&quot;, &quot;Customers&quot;, &quot;edit&quot;);</p><br><p>// Returns 1<br>$acl-&gt;isAllowed(&quot;Guests&quot;, &quot;Customers&quot;, &quot;search&quot;);</p><br><p>// Returns 1<br>$acl-&gt;isAllowed(&quot;Guests&quot;, &quot;Customers&quot;, &quot;create&quot;);<br>Function based access</p><br><p>Also you can add as 4th parameter your custom function which must return boolean value. It will be called when you use isAllowed() method. You can pass parameters as associative array to isAllowed() method as 4th argument where key is parameter name in our defined function.</p><br><p>&lt;?php<br>// Set access level for role into resources with custom function<br>$acl-&gt;allow(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;search&quot;,<br>    function ($a) {<br>        return $a % 2 === 0;<br>    }<br>);</p><br><p>// Check whether role has access to the operation with custom function</p><br><p>// Returns true<br>$acl-&gt;isAllowed(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;search&quot;,<br>    [<br>        &quot;a&quot; =&gt; 4,<br>    ]<br>);</p><br><p>// Returns false<br>$acl-&gt;isAllowed(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;search&quot;,<br>    [<br>        &quot;a&quot; =&gt; 3,<br>    ]<br>);<br>Also if you don&#39;t provide any parameters in isAllowed() method then default behaviour will be Acl::ALLOW. You can change it by using method setNoArgumentsDefaultAction().</p><br><p>use Phalcon\\Acl;</p><br><p>&lt;?php<br>// Set access level for role into resources with custom function<br>$acl-&gt;allow(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;search&quot;,<br>    function ($a) {<br>        return $a % 2 === 0;<br>    }<br>);</p><br><p>// Check whether role has access to the operation with custom function</p><br><p>// Returns true<br>$acl-&gt;isAllowed(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;search&quot;<br>);</p><br><p>// Change no arguments default action<br>$acl-&gt;setNoArgumentsDefaultAction(<br>    Acl::DENY<br>);</p><br><p>// Returns false<br>$acl-&gt;isAllowed(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;search&quot;<br>);<br>Objects as role name and resource name</p><br><p>You can pass objects as roleName and resourceName. Your classes must implement :doc:<code>Phalcon\\Acl\\RoleAware &lt;../api/Phalcon_Acl_RoleAware&gt;</code> for roleName and :doc:<code>Phalcon\\Acl\\ResourceAware &lt;../api/Phalcon_Acl_ResourceAware&gt;</code> for resourceName.</p><br><p>Our UserRole class</p><br><p>&lt;?php</p><br><p>use Phalcon\\Acl\\RoleAware;</p><br><p>// Create our class which will be used as roleName<br>class UserRole implements RoleAware<br>{<br>    protected $id;</p><br><pre><code>protected $roleName;<br><br>public function <strong>construct($id, $roleName)<br>{<br>    $this-&gt;id       = $id;<br>    $this-&gt;roleName = $roleName;<br>}<br><br>public function getId()<br>{<br>    return $this-&gt;id;<br>}<br><br>// Implemented function from RoleAware Interface<br>public function getRoleName()<br>{<br>    return $this-&gt;roleName;<br>}<br></code></pre><p>}<br>And our ModelResource class</p><br><p>&lt;?php</p><br><p>use Phalcon\\Acl\\ResourceAware;</p><br><p>// Create our class which will be used as resourceName<br>class ModelResource implements ResourceAware<br>{<br>    protected $id;</p><br><pre><code>protected $resourceName;<br><br>protected $userId;<br><br>public function </strong>construct($id, $resourceName, $userId)<br>{<br>    $this-&gt;id           = $id;<br>    $this-&gt;resourceName = $resourceName;<br>    $this-&gt;userId       = $userId;<br>}<br><br>public function getId()<br>{<br>    return $this-&gt;id;<br>}<br><br>public function getUserId()<br>{<br>    return $this-&gt;userId;<br>}<br><br>// Implemented function from ResourceAware Interface<br>public function getResourceName()<br>{<br>    return $this-&gt;resourceName;<br>}<br></code></pre><p>}<br>Then you can use them in isAllowed() method.</p><br><p>&lt;?php</p><br><p>use UserRole;<br>use ModelResource;</p><br><p>// Set access level for role into resources<br>$acl-&gt;allow(&quot;Guests&quot;, &quot;Customers&quot;, &quot;search&quot;);<br>$acl-&gt;allow(&quot;Guests&quot;, &quot;Customers&quot;, &quot;create&quot;);<br>$acl-&gt;deny(&quot;Guests&quot;, &quot;Customers&quot;, &quot;update&quot;);</p><br><p>// Create our objects providing roleName and resourceName</p><br><p>$customer = new ModelResource(<br>    1,<br>    &quot;Customers&quot;,<br>    2<br>);</p><br><p>$designer = new UserRole(<br>    1,<br>    &quot;Designers&quot;<br>);</p><br><p>$guest = new UserRole(<br>    2,<br>    &quot;Guests&quot;<br>);</p><br><p>$anotherGuest = new UserRole(<br>    3,<br>    &quot;Guests&quot;<br>);</p><br><p>// Check whether our user objects have access to the operation on model object</p><br><p>// Returns false<br>$acl-&gt;isAllowed(<br>    $designer,<br>    $customer,<br>    &quot;search&quot;<br>);</p><br><p>// Returns true<br>$acl-&gt;isAllowed(<br>    $guest,<br>    $customer,<br>    &quot;search&quot;<br>);</p><br><p>// Returns true<br>$acl-&gt;isAllowed(<br>    $anotherGuest,<br>    $customer,<br>    &quot;search&quot;<br>);<br>Also you can access those objects in your custom function in allow() or deny(). They are automatically bind to parameters by type in function.</p><br><p>&lt;?php</p><br><p>use UserRole;<br>use ModelResource;</p><br><p>// Set access level for role into resources with custom function<br>$acl-&gt;allow(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;search&quot;,<br>    function (UserRole $user, ModelResource $model) { // User and Model classes are necessary<br>        return $user-&gt;getId == $model-&gt;getUserId();<br>    }<br>);</p><br><p>$acl-&gt;allow(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;create&quot;<br>);</p><br><p>$acl-&gt;deny(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;update&quot;<br>);</p><br><p>// Create our objects providing roleName and resourceName</p><br><p>$customer = new ModelResource(<br>    1,<br>    &quot;Customers&quot;,<br>    2<br>);</p><br><p>$designer = new UserRole(<br>    1,<br>    &quot;Designers&quot;<br>);</p><br><p>$guest = new UserRole(<br>    2,<br>    &quot;Guests&quot;<br>);</p><br><p>$anotherGuest = new UserRole(<br>    3,<br>    &quot;Guests&quot;<br>);</p><br><p>// Check whether our user objects have access to the operation on model object</p><br><p>// Returns false<br>$acl-&gt;isAllowed(<br>    $designer,<br>    $customer,<br>    &quot;search&quot;<br>);</p><br><p>// Returns true<br>$acl-&gt;isAllowed(<br>    $guest,<br>    $customer,<br>    &quot;search&quot;<br>);</p><br><p>// Returns false<br>$acl-&gt;isAllowed(<br>    $anotherGuest,<br>    $customer,<br>    &quot;search&quot;<br>);<br>You can still add any custom parameters to function and pass associative array in isAllowed() method. Also order doesn&#39;t matter.</p><br><p>角色继承（Roles Inheritance）</p><br><p>我们可以使用 :doc:<code>Phalcon\\Acl\\Role &lt;../api/Phalcon_Acl_Role&gt;</code> 提供的继承机制来构造更复杂的角色。 Phalcon中的角色可以继承来自其它角色的 权限, 这样就可以实现更巧妙的资源访问控制。 如果要继承权限用户， 我们需要在添加角色函数的第二个参数中写上要继承的那个角色实例。</p><br><p>&lt;?php</p><br><p>use Phalcon\\Acl\\Role;</p><br><p>// ...</p><br><p>// 创建角色</p><br><p>$roleAdmins = new Role(&quot;Administrators&quot;, &quot;Super-User role&quot;);</p><br><p>$roleGuests = new Role(&quot;Guests&quot;);</p><br><p>// 添加 &quot;Guests&quot; 到 ACL<br>$acl-&gt;addRole($roleGuests);</p><br><p>// 使Administrators继承Guests的访问权限<br>$acl-&gt;addRole($roleAdmins, $roleGuests);<br>序列化 ACL 列表（Serializing ACL lists）</p><br><p>为了提高性能， :doc:<code>Phalcon\\Acl &lt;../api/Phalcon_Acl&gt;</code> 的实例可以被实例化到APC, session， 文本或数据库中， 这样开发者就不需要重复的 定义acl了。 下面展示了如何去做：</p><br><p>&lt;?php</p><br><p>use Phalcon\\Acl\\Adapter\\Memory as AclList;</p><br><p>// ...</p><br><p>// 检查ACL数据是否存在<br>if (!is_file(&quot;app/security/acl.data&quot;)) {<br>    $acl = new AclList();</p><br><pre><code>// ... Define roles, resources, access, etc<br><br>// 保存实例化的数据到文本文件中<br>file_put_contents(<br>    &quot;app/security/acl.data&quot;,<br>    serialize($acl)<br>);<br></code></pre><p>} else {<br>    // 返序列化<br>    $acl = unserialize(<br>        file_get_contents(&quot;app/security/acl.data&quot;)<br>    );<br>}</p><br><p>// 使用ACL<br>if ($acl-&gt;isAllowed(&quot;Guests&quot;, &quot;Customers&quot;, &quot;edit&quot;)) {<br>    echo &quot;Access granted!&quot;;<br>} else {<br>    echo &quot;Access denied :(&quot;;<br>}<br>It&#39;s recommended to use the Memory adapter during development and use one of the other adapters in production.</p><br><p>ACL 事件（ACL Events）</p><br><p>如果需要的话 :doc:<code>Phalcon\\Acl &lt;../api/Phalcon_Acl&gt;</code> 可以发送事件到 :doc:<code>EventsManager <events></code> 。 这里我们为acl绑定事件。 其中一些事件的处理结果如果返回了false则表示正在处理的操作会被中止。 支持如下的事件：</p><br><p>事件名    触发条件    能否中止操作<br>beforeCheckAccess    在权限检查之前触发    Yes<br>afterCheckAccess    在权限检查之后触发    No<br>下面的例子中展示了如何绑定事件到此组件：</p><br><p>&lt;?php</p><br><p>use Phalcon\\Acl\\Adapter\\Memory as AclList;<br>use Phalcon\\Events\\Event;<br>use Phalcon\\Events\\Manager as EventsManager;</p><br><p>// ...</p><br><p>// 创建事件管理器<br>$eventsManager = new EventsManager();</p><br><p>// 绑定事件类型为acl<br>$eventsManager-&gt;attach(<br>    &quot;acl:beforeCheckAccess&quot;,<br>    function (Event $event, $acl) {<br>        echo $acl-&gt;getActiveRole();</p><br><pre><code>    echo $acl-&gt;getActiveResource();<br><br>    echo $acl-&gt;getActiveAccess();<br>}<br></code></pre><p>);</p><br><p>$acl = new AclList();</p><br><p>// Setup the $acl<br>// ...</p><br><p>// 绑定eventsManager到ACL组件<br>$acl-&gt;setEventsManager($eventsManager);<br>自定义适配器（Implementing your own adapters）</p><br><p>开发者要创建自己的扩展或已存在适配器则需要实现此 :doc:<code>Phalcon\\Acl\\AdapterInterface &lt;../api/Phalcon_Acl_AdapterInterface&gt;</code> 接口。</p>\n', '2017-12-12 15:44:17', '13', '0');
INSERT INTO `t_article` VALUES ('19', '数据库抽象层（Database Abstraction Layer）', '<p><strong>:doc:<code>Phalcon\\\\Db &lt;../api/Phalcon_Db&gt;</code> 是 :doc:<code>Phalcon\\\\Mvc\\\\Model &lt;../api/Phalcon_Mvc_Model&gt;</code> 背后的一个组件，它为框架提供了强大的model层。它是一个完全由C语言写的独立的高级抽象层的数据库系统。</strong></p>\n<p><strong>这个组件提供了比传统模式的更容易上手的数据库操作。</strong></p>\n<p>这个指引不是一个完整的包含所有方法和它们的参数的文档。 查看完整的文档参考，请访问 :doc:<code>API &lt;../api/index&gt;</code><br><strong>数据库适配器（Database Adapters）</strong></p>\n<p>这个组件利用了这些适配器去封装特定的数据库的详细操作。Phalcon使用 PDO 去连接这些数据库。下面这些是我们支持的数据库引擎：</p>\n<p>Class    描述<br>:doc:<code>Phalcon\\\\Db\\\\Adapter\\\\Pdo\\\\Mysql &lt;../api/Phalcon_Db_Adapter_Pdo_Mysql&gt;</code>    MySQL是这个世界上最多人使用的关系数据库，它作为服务器运行为多用户提供了访问多个数据库的功能。<br>:doc:<code>Phalcon\\\\Db\\\\Adapter\\\\Pdo\\\\Postgresql &lt;../api/Phalcon_Db_Adapter_Pdo_Postgresql&gt;</code>    PostgreSQL是一个强大，开源的关系数据库。它拥有超过15年的积极发展和经过验证的架构，这些已经为它赢得了可靠性、数据完整性、正确性的良好的声誉<br>:doc:<code>Phalcon\\\\Db\\\\Adapter\\\\Pdo\\\\Sqlite &lt;../api/Phalcon_Db_Adapter_Pdo_Sqlite&gt;</code>    SQLite是一个实现一个自包含的，无服务器，零配置，支持事务的SQL数据库引擎的软件库<br>自定义适配器（Implementing your own adapters）</p>\n<p>如果你想创建自己的适配器或者扩展现有的适配器，这个 :doc:<code>Phalcon\\\\Db\\\\AdapterInterface &lt;../api/Phalcon_Db_AdapterInterface&gt;</code> 接口必须被实现。</p>\n<p>数据库“方言”</p>\n<p>Phalcon把每个数据库引擎的具体操作封装成“方言”，这些“方言”提供了提供通用的功能和SQL生成的适配器。 (译者注：这里的“方言”是指Phalcon把一些常用的数据库操作封装成类的方法，例如检查数据库中表是否存在，不再需要麻烦的手动写SQL，可以把调用tableExists方法去查询)</p>\n<p>名称    描述<br>:doc:<code>Phalcon\\\\Db\\\\Dialect\\\\Mysql &lt;../api/Phalcon_Db_Dialect_Mysql&gt;</code>    MySQL的具体“方言”<br>:doc:<code>Phalcon\\\\Db\\\\Dialect\\\\Postgresql &lt;../api/Phalcon_Db_Dialect_Postgresql&gt;</code>    PostgreSQL的具体“方言”<br>:doc:<code>Phalcon\\\\Db\\\\Dialect\\\\Sqlite &lt;../api/Phalcon_Db_Dialect_Sqlite&gt;</code>    SQLite的具体“方言”<br>自定义“方言”（Implementing your own dialects）</p>\n<p>如果你想创建自己的“方言”或者扩展现有的“方言”，你需要实现这个接口： :doc:<code>Phalcon\\\\Db\\\\DialectInterface &lt;../api/Phalcon_Db_DialectInterface&gt;</code></p>\n<p>连接数据库（Connecting to Databases）</p>\n<p>为了建立连接，实例化适配器类是必须的。它只接收一个包含连接参数的数组。 下面的例子展示了，传递必要参数和可选项的参数去连接数据库：</p>\n<p>&lt;?php</p>\n<p>// 必要参数<br>$config = [<br>    &quot;host&quot;     =&gt; &quot;127.0.0.1&quot;,<br>    &quot;username&quot; =&gt; &quot;mike&quot;,<br>    &quot;password&quot; =&gt; &quot;sigma&quot;,<br>    &quot;dbname&quot;   =&gt; &quot;test_db&quot;,<br>];</p>\n<p>// 可选参数<br>$config[&quot;persistent&quot;] = false;</p>\n<p>// 创建连接<br>$connection = new \\Phalcon\\Db\\Adapter\\Pdo\\Mysql($config);<br>&lt;?php</p>\n<p>// 必要参数<br>$config = [<br>    &quot;host&quot;     =&gt; &quot;localhost&quot;,<br>    &quot;username&quot; =&gt; &quot;postgres&quot;,<br>    &quot;password&quot; =&gt; &quot;secret1&quot;,<br>    &quot;dbname&quot;   =&gt; &quot;template&quot;,<br>];</p>\n<p>// 可选参数<br>$config[&quot;schema&quot;] = &quot;public&quot;;</p>\n<p>// 创建连接<br>$connection = new \\Phalcon\\Db\\Adapter\\Pdo\\Postgresql($config);<br>&lt;?php</p>\n<p>// 必要参数<br>$config = [<br>    &quot;dbname&quot; =&gt; &quot;/path/to/database.db&quot;,<br>];</p>\n<p>// 创建连接<br>$connection = new \\Phalcon\\Db\\Adapter\\Pdo\\Sqlite($config);<br>设置额外的 PDO 选项（Setting up additional PDO options）</p>\n<p>你可以在连接的时候，通过传递&#39;options&#39;参数，设置PDO选项：</p>\n<p>&lt;?php</p>\n<p>// 带PDO options参数的创建连接<br>$connection = new \\Phalcon\\Db\\Adapter\\Pdo\\Mysql(<br>    [<br>        &quot;host&quot;     =&gt; &quot;localhost&quot;,<br>        &quot;username&quot; =&gt; &quot;root&quot;,<br>        &quot;password&quot; =&gt; &quot;sigma&quot;,<br>        &quot;dbname&quot;   =&gt; &quot;test_db&quot;,<br>        &quot;options&quot;  =&gt; [<br>            PDO::MYSQL_ATTR_INIT_COMMAND =&gt; &quot;SET NAMES &#39;UTF8&#39;&quot;,<br>            PDO::ATTR_CASE               =&gt; PDO::CASE_LOWER,<br>        ]<br>    ]<br>);<br>查找行（Finding Rows）</p>\n<p>文档 :doc:<code>Phalcon\\\\Db &lt;../api/Phalcon_Db&gt;</code> 提供了几种方法去查询行。在这个例子中，SQL语句是必须符合数据库的SQL语法的：</p>\n<p>&lt;?php</p>\n<p>$sql = &quot;SELECT id, name FROM robots ORDER BY name&quot;;</p>\n<p>// 发送SQL语句到数据库<br>$result = $connection-&gt;query($sql);</p>\n<p>// 打印每个robot名称<br>while ($robot = $result-&gt;fetch()) {<br>   echo $robot[&quot;name&quot;];<br>}</p>\n<p>// 返回一个包含返回结果的数组<br>$robots = $connection-&gt;fetchAll($sql);<br>foreach ($robots as $robot) {<br>   echo $robot[&quot;name&quot;];<br>}</p>\n<p>// 只返回查询结果的第一条数据<br>$robot = $connection-&gt;fetchOne($sql);<br>默认情况下，这些调用会建立一个数组，数组中包含以字段名和以数字下标为key的值。你可以改变这种行为通过使用 Phalcon\\Db\\Result::setFetchMode() 。这个方法接受一个常量值，确定哪些类型的指标是被要求的。</p>\n<p>常量    描述<br>Phalcon\\Db::FETCH_NUM    返回一个包含数字下标的数组<br>Phalcon\\Db::FETCH_ASSOC    返回一个包含字段名的数组<br>Phalcon\\Db::FETCH_BOTH    返回一个包含字段名和数字下标的数组<br>Phalcon\\Db::FETCH_OBJ    返回一个对象而不是一个数组<br>&lt;?php</p>\n<p>$sql = &quot;SELECT id, name FROM robots ORDER BY name&quot;;<br>$result = $connection-&gt;query($sql);</p>\n<p>$result-&gt;setFetchMode(Phalcon\\Db::FETCH_NUM);<br>while ($robot = $result-&gt;fetch()) {<br>   echo $robot[0];<br>}<br>这个 Phalcon\\Db::query() 方法返回一个 :doc:<code>Phalcon\\\\Db\\\\Result\\\\Pdo &lt;../api/Phalcon_Db_Result_Pdo&gt;</code> 实例。这些对象封装了凡是涉及到返回的结果集的功能，例如遍历，寻找特定行，计算总行数等等</p>\n<p>&lt;?php</p>\n<p>$sql = &quot;SELECT id, name FROM robots&quot;;<br>$result = $connection-&gt;query($sql);</p>\n<p>// 遍历结果集<br>while ($robot = $result-&gt;fetch()) {<br>   echo $robot[&quot;name&quot;];<br>}</p>\n<p>// 获取第三条记录<br>$result-&gt;seek(2);<br>$robot = $result-&gt;fetch();</p>\n<p>// 计算结果集的记录数<br>echo $result-&gt;numRows();<br>绑定参数（Binding Parameters）</p>\n<p>在 :doc:<code>Phalcon\\\\Db &lt;../api/Phalcon_Db&gt;</code> 中支持绑定参数。虽然使用绑定参数会有很少性能的损失，但是我们鼓励你使用这个方法 去消除(译者注：是消除，不是减少，因为使用参数绑定可以彻底解决SQL注入问题)SQL注入攻击的可能性。 字符串和占位符都支持，就像下面展示的那样，绑定参数可以简单地实现：</p>\n<p>&lt;?php</p>\n<p>// 用数字占位符绑定参数<br>$sql    = &quot;SELECT * FROM robots WHERE name = ? ORDER BY name&quot;;<br>$result = $connection-&gt;query(<br>    $sql,<br>    [<br>        &quot;Wall-E&quot;,<br>    ]<br>);</p>\n<p>// 用指定的占位符绑定参数<br>$sql     = &quot;INSERT INTO <code>robots</code>(name`, year) VALUES (:name, :year)&quot;;<br>$success = $connection-&gt;query(<br>    $sql,<br>    [<br>        &quot;name&quot; =&gt; &quot;Astro Boy&quot;,<br>        &quot;year&quot; =&gt; 1952,<br>    ]<br>);<br>When using numeric placeholders, you will need to define them as integers i.e. 1 or 2. In this case &quot;1&quot; or &quot;2&quot; are considered strings and not numbers, so the placeholder could not be successfully replaced. With any adapter data are automatically escaped using PDO Quote.</p>\n<p>This function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in your database server configuration, as a wrong charset will produce undesired effects when storing or retrieving data.</p>\n<p>Also, you can pass your parameters directly to the execute/query methods. In this case bound parameters are directly passed to PDO:</p>\n<p>&lt;?php</p>\n<p>// Binding with PDO placeholders<br>$sql    = &quot;SELECT * FROM robots WHERE name = ? ORDER BY name&quot;;<br>$result = $connection-&gt;query(<br>    $sql,<br>    [<br>        1 =&gt; &quot;Wall-E&quot;,<br>    ]<br>);<br>插入、更新、删除行（Inserting/Updating/Deleting Rows）</p>\n<p>去插入，更新或者删除行，你可以使用原生SQL操作，或者使用类中预设的方法</p>\n<p>&lt;?php</p>\n<p>// 使用原生SQL插入行<br>$sql     = &quot;INSERT INTO <code>robots</code>(<code>name</code>, <code>year</code>) VALUES (&#39;Astro Boy&#39;, 1952)&quot;;<br>$success = $connection-&gt;execute($sql);</p>\n<p>// 使用带占位符的SQL插入行<br>$sql     = &quot;INSERT INTO <code>robots</code>(<code>name</code>, <code>year</code>) VALUES (?, ?)&quot;;<br>$success = $connection-&gt;execute(<br>    $sql,<br>    [<br>        &quot;Astro Boy&quot;,<br>        1952,<br>    ]<br>);</p>\n<p>// 使用类中预设的方法插入行<br>$success = $connection-&gt;insert(<br>    &quot;robots&quot;,<br>    [<br>        &quot;Astro Boy&quot;,<br>        1952,<br>    ],<br>    [<br>        &quot;name&quot;,<br>        &quot;year&quot;,<br>    ],<br>);</p>\n<p>// 插入数据的另外一种方法<br>$success = $connection-&gt;insertAsDict(<br>    &quot;robots&quot;,<br>    [<br>        &quot;name&quot; =&gt; &quot;Astro Boy&quot;,<br>        &quot;year&quot; =&gt; 1952,<br>    ]<br>);</p>\n<p>// 使用原生SQL更新行<br>$sql     = &quot;UPDATE <code>robots</code> SET <code>name</code> = &#39;Astro boy&#39; WHERE <code>id</code> = 101&quot;;<br>$success = $connection-&gt;execute($sql);</p>\n<p>// 使用带占位符的SQL更新行<br>$sql     = &quot;UPDATE <code>robots</code> SET <code>name</code> = ? WHERE <code>id</code> = ?&quot;;<br>$success = $connection-&gt;execute(<br>    $sql,<br>    [<br>        &quot;Astro Boy&quot;,<br>        101,<br>    ]<br>);</p>\n<p>// 使用类中预设的方法更新行<br>$success = $connection-&gt;update(<br>    &quot;robots&quot;,<br>    [<br>        &quot;name&quot;,<br>    ],<br>    [<br>        &quot;New Astro Boy&quot;,<br>    ],<br>    &quot;id = 101&quot; // Warning! In this case values are not escaped<br>);</p>\n<p>// 更新数据的另外一种方法<br>$success = $connection-&gt;updateAsDict(<br>    &quot;robots&quot;,<br>    [<br>        &quot;name&quot; =&gt; &quot;New Astro Boy&quot;,<br>    ],<br>    &quot;id = 101&quot; // Warning! In this case values are not escaped<br>);</p>\n<p>// With escaping conditions<br>$success = $connection-&gt;update(<br>    &quot;robots&quot;,<br>    [<br>        &quot;name&quot;,<br>    ],<br>    [<br>        &quot;New Astro Boy&quot;,<br>    ],<br>    [<br>        &quot;conditions&quot; =&gt; &quot;id = ?&quot;,<br>        &quot;bind&quot;       =&gt; [101],<br>        &quot;bindTypes&quot;  =&gt; [PDO::PARAM_INT], // Optional parameter<br>    ]<br>);<br>$success = $connection-&gt;updateAsDict(<br>    &quot;robots&quot;,<br>    [<br>        &quot;name&quot; =&gt; &quot;New Astro Boy&quot;,<br>    ],<br>    [<br>        &quot;conditions&quot; =&gt; &quot;id = ?&quot;,<br>        &quot;bind&quot;       =&gt; [101],<br>        &quot;bindTypes&quot;  =&gt; [PDO::PARAM_INT], // Optional parameter<br>    ]<br>);</p>\n<p>// 使用原生SQL删除数据<br>$sql     = &quot;DELETE <code>robots</code> WHERE <code>id</code> = 101&quot;;<br>$success = $connection-&gt;execute($sql);</p>\n<p>// 使用带占位符的SQL删除行<br>$sql     = &quot;DELETE <code>robots</code> WHERE <code>id</code> = ?&quot;;<br>$success = $connection-&gt;execute($sql, [101]);</p>\n<p>// 使用类中预设的方法删除行<br>$success = $connection-&gt;delete(<br>    &quot;robots&quot;,<br>    &quot;id = ?&quot;,<br>    [<br>        101,<br>    ]<br>);<br>事务与嵌套事务（Transactions and Nested Transactions）</p>\n<p>PDO支持事务工作。在事务里面执行数据操作, 在大多数数据库系统上, 往往可以提高数据库的性能：</p>\n<p>&lt;?php</p>\n<p>try {<br>    // 开始一个事务<br>    $connection-&gt;begin();</p>\n<pre><code>// 执行一些操作\n$connection-&gt;execute(&quot;DELETE `robots` WHERE `id` = 101&quot;);\n$connection-&gt;execute(&quot;DELETE `robots` WHERE `id` = 102&quot;);\n$connection-&gt;execute(&quot;DELETE `robots` WHERE `id` = 103&quot;);\n\n// 提交操作，如果一切正常\n$connection-&gt;commit();\n</code></pre><p>} catch (Exception $e) {<br>    // 如果发现异常，回滚操作<br>    $connection-&gt;rollback();<br>}<br>除了标准的事务， :doc:<code>Phalcon\\\\Db &lt;../api/Phalcon_Db&gt;</code> 提供了内置支持<code>嵌套事务</code>_(如果数据库系统支持的话)。 当你第二次调用begin()方法，一个嵌套的事务就被创建了：</p>\n<p>&lt;?php</p>\n<p>try {<br>    // 开始一个事务<br>    $connection-&gt;begin();</p>\n<pre><code>// 执行某些SQL操作\n$connection-&gt;execute(&quot;DELETE `robots` WHERE `id` = 101&quot;);\n\ntry {\n    // 开始一个嵌套事务\n    $connection-&gt;begin();\n\n    // 在嵌套事务中执行这些SQL\n    $connection-&gt;execute(&quot;DELETE `robots` WHERE `id` = 102&quot;);\n    $connection-&gt;execute(&quot;DELETE `robots` WHERE `id` = 103&quot;);\n\n    // 创建一个保存的点\n    $connection-&gt;commit();\n} catch (Exception $e) {\n    // 发生错误，释放嵌套的事务\n    $connection-&gt;rollback();\n}\n\n// 继续，执行更多SQL操作\n$connection-&gt;execute(&quot;DELETE `robots` WHERE `id` = 104&quot;);\n\n// 如果一切正常，提交\n$connection-&gt;commit();\n</code></pre><p>} catch (Exception $e) {<br>    // 发生错误，回滚操作<br>    $connection-&gt;rollback();<br>}<br>数据库事件（Database Events）</p>\n<p>:doc:<code>Phalcon\\\\Db &lt;../api/Phalcon_Db&gt;</code> 可以发送事件到一个 :doc:<code>EventsManager &lt;events&gt;</code> 中，如果它存在的话。 一些事件当返回布尔值false可以停止操作。我们支持下面这些事件：</p>\n<p>事件名    何时触发    可以停止操作吗?<br>afterConnect    当成功连接数据库之后触发    No<br>beforeQuery    在发送SQL到数据库前触发    Yes<br>afterQuery    在发送SQL到数据库执行后触发    No<br>beforeDisconnect    在关闭一个暂存的数据库连接前触发    No<br>beginTransaction    事务启动前触发    No<br>rollbackTransaction    事务回滚前触发    No<br>commitTransaction    事务提交前触发    No<br>绑定一个EventsManager给一个连接是很简单的， :doc:<code>Phalcon\\\\Db &lt;../api/Phalcon_Db&gt;</code> 将触发这些类型为“db”的事件：</p>\n<p>&lt;?php</p>\n<p>use Phalcon\\Events\\Manager as EventsManager;<br>use Phalcon\\Db\\Adapter\\Pdo\\Mysql as Connection;</p>\n<p>$eventsManager = new EventsManager();</p>\n<p>// 监听所有数据库事件<br>$eventsManager-&gt;attach(&#39;db&#39;, $dbListener);</p>\n<p>$connection = new Connection(<br>    [<br>        &quot;host&quot;     =&gt; &quot;localhost&quot;,<br>        &quot;username&quot; =&gt; &quot;root&quot;,<br>        &quot;password&quot; =&gt; &quot;secret&quot;,<br>        &quot;dbname&quot;   =&gt; &quot;invo&quot;,<br>    ]<br>);</p>\n<p>// 把eventsManager分配给适配器实例<br>$connection-&gt;setEventsManager($eventsManager);<br>数据库事件中，停止操作是非常有用的，例如：如果你想要实现一个注入检查器，在发送SQL到数据库前触发：</p>\n<p>&lt;?php</p>\n<p>use Phalcon\\Events\\Event;</p>\n<p>$eventsManager-&gt;attach(<br>    &quot;db:beforeQuery&quot;,<br>    function (Event $event, $connection) {<br>        $sql = $connection-&gt;getSQLStatement();</p>\n<pre><code>    // 检查是否有恶意关键词\n    if (preg_match(&quot;/DROP|ALTER/i&quot;, $sql)) {\n        // DROP/ALTER 操作是不允许的, 这肯定是一个注入!\n        // 返回false中断此操作\n        return false;\n    }\n\n    // 一切正常\n    return true;\n}\n</code></pre><p>);<br>分析 SQL 语句（Profiling SQL Statements）</p>\n<p>:doc:<code>Phalcon\\\\Db &lt;../api/Phalcon_Db&gt;</code> 包含了一个性能分析组件，叫 :doc:<code>Phalcon\\\\Db\\\\Profiler &lt;../api/Phalcon_Db_Profiler&gt;</code> ，它被用于分析数据库的操作性能以便诊断性能问题，并发现瓶颈。 使用 :doc:<code>Phalcon\\\\Db\\\\Profiler &lt;../api/Phalcon_Db_Profiler&gt;</code> 来分析数据库真的很简单:</p>\n<p>&lt;?php</p>\n<p>use Phalcon\\Events\\Event;<br>use Phalcon\\Events\\Manager as EventsManager;<br>use Phalcon\\Db\\Profiler as DbProfiler;</p>\n<p>$eventsManager = new EventsManager();</p>\n<p>$profiler = new DbProfiler();</p>\n<p>// 监听所有数据库的事件<br>$eventsManager-&gt;attach(<br>    &quot;db&quot;,<br>    function (Event $event, $connection) use ($profiler) {<br>        if ($event-&gt;getType() === &quot;beforeQuery&quot;) {<br>            $sql = $connection-&gt;getSQLStatement();</p>\n<pre><code>        // 操作前启动分析\n        $profiler-&gt;startProfile($sql);\n    }\n\n    if ($event-&gt;getType() === &quot;afterQuery&quot;) {\n        // 操作后停止分析\n        $profiler-&gt;stopProfile();\n    }\n}\n</code></pre><p>);</p>\n<p>// 设置事件管理器<br>$connection-&gt;setEventsManager($eventsManager);</p>\n<p>$sql = &quot;SELECT buyer_name, quantity, product_name &quot;<br>     . &quot;FROM buyers &quot;<br>     . &quot;LEFT JOIN products ON buyers.pid = products.id&quot;;</p>\n<p>// 执行SQL<br>$connection-&gt;query($sql);</p>\n<p>// 获取最后一个分析结果<br>$profile = $profiler-&gt;getLastProfile();</p>\n<p>echo &quot;SQL Statement: &quot;, $profile-&gt;getSQLStatement(), &quot;\\n&quot;;<br>echo &quot;Start Time: &quot;, $profile-&gt;getInitialTime(), &quot;\\n&quot;;<br>echo &quot;Final Time: &quot;, $profile-&gt;getFinalTime(), &quot;\\n&quot;;<br>echo &quot;Total Elapsed Time: &quot;, $profile-&gt;getTotalElapsedSeconds(), &quot;\\n&quot;;<br>你也可以基于 :doc:<code>Phalcon\\\\Db\\\\Profiler &lt;../api/Phalcon_Db_Profiler&gt;</code> 建立你自己的分析器类，以记录SQL语句发送到数据库的实时统计：</p>\n<p>&lt;?php</p>\n<p>use Phalcon\\Events\\Manager as EventsManager;<br>use Phalcon\\Db\\Profiler as Profiler;<br>use Phalcon\\Db\\Profiler\\Item as Item;</p>\n<p>class DbProfiler extends Profiler<br>{<br>    /**</p>\n<pre><code> * 在SQL语句将要发送给数据库前执行\n */\npublic function beforeStartProfile(Item $profile)\n{\n    echo $profile-&gt;getSQLStatement();\n}\n\n/**\n * 在SQL语句已经被发送到数据库后执行\n */\npublic function afterEndProfile(Item $profile)\n{\n    echo $profile-&gt;getTotalElapsedSeconds();\n}\n</code></pre><p>}</p>\n<p>// 创建一个事件管理器<br>$eventsManager = new EventsManager();</p>\n<p>// 创建一个监听器<br>$dbProfiler = new DbProfiler();</p>\n<p>// 设置监听器监听所有的数据库事件<br>$eventsManager-&gt;attach(&quot;db&quot;, $dbProfiler);<br>记录 SQL 语句（Logging SQL Statements）</p>\n<p>使用例如 :doc:<code>Phalcon\\\\Db &lt;../api/Phalcon_Db&gt;</code> 的高级抽象组件操作数据库，被发送到数据库中执行的原生SQL语句是难以获知的。使用 :doc:<code>Phalcon\\\\Logger &lt;../api/Phalcon_Logger&gt;</code> 和 :doc:<code>Phalcon\\\\Db &lt;../api/Phalcon_Db&gt;</code> 来配合使用，可以在数据库抽象层上提供记录的功能。</p>\n<p>&lt;?php</p>\n<p>use Phalcon\\Logger;<br>use Phalcon\\Events\\Event;<br>use Phalcon\\Events\\Manager as EventsManager;<br>use Phalcon\\Logger\\Adapter\\File as FileLogger;</p>\n<p>$eventsManager = new EventsManager();</p>\n<p>$logger = new FileLogger(&quot;app/logs/db.log&quot;);</p>\n<p>$eventsManager-&gt;attach(<br>    &quot;db:beforeQuery&quot;,<br>    function (Event $event, $connection) use ($logger) {<br>        $sql = $connection-&gt;getSQLStatement();</p>\n<pre><code>    $logger-&gt;log($sql, Logger::INFO);\n}\n</code></pre><p>);</p>\n<p>// 设置事件管理器<br>$connection-&gt;setEventsManager($eventsManager);</p>\n<p>// 执行一些SQL<br>$connection-&gt;insert(<br>    &quot;products&quot;,<br>    [<br>        &quot;Hot pepper&quot;,<br>        3.50,<br>    ],<br>    [<br>        &quot;name&quot;,<br>        &quot;price&quot;,<br>    ]<br>);<br>如上操作，文件 app/logs/db.log 将包含像下面这样的信息：</p>\n<p>[Sun, 29 Apr 12 22:35:26 -0500][DEBUG][Resource Id #77] INSERT INTO products<br>(name, price) VALUES (&#39;Hot pepper&#39;, 3.50)<br>自定义日志记录器（Implementing your own Logger）</p>\n<p>你可以实现你自己的日志类来记录数据库的所有操作，通过创建一个实现了&quot;log&quot;方法的类。 这个方法需要接受一个字符串作为第一个参数。你可以把日志类的对象传递给 Phalcon\\Db::setLogger()， 这样执行SQL时将调用这个对象的log方法去记录。</p>\n<p>获取数据库表与视图信息（Describing Tables/Views）</p>\n<p>:doc:<code>Phalcon\\\\Db &lt;../api/Phalcon_Db&gt;</code> 也提供了方法去检索详细的表和视图信息：</p>\n<p>&lt;?php</p>\n<p>// 获取test_db数据库的所有表<br>$tables = $connection-&gt;listTables(&quot;test_db&quot;);</p>\n<p>// 在数据库中是否存在&#39;robots&#39;这个表<br>$exists = $connection-&gt;tableExists(&quot;robots&quot;);</p>\n<p>// 获取&#39;robots&#39;字段名称，数据类型，特殊特征<br>$fields = $connection-&gt;describeColumns(&quot;robots&quot;);<br>foreach ($fields as $field) {<br>    echo &quot;Column Type: &quot;, $field[&quot;Type&quot;];<br>}</p>\n<p>// 获取&#39;robots&#39;表的所有索引<br>$indexes = $connection-&gt;describeIndexes(&quot;robots&quot;);<br>foreach ($indexes as $index) {<br>    print_r(<br>        $index-&gt;getColumns()<br>    );<br>}</p>\n<p>// 获取&#39;robots&#39;表的所有外键<br>$references = $connection-&gt;describeReferences(&quot;robots&quot;);<br>foreach ($references as $reference) {<br>    // 打印引用的列<br>    print_r(<br>        $reference-&gt;getReferencedColumns()<br>    );<br>}<br>一个表的详细描述信息和MYSQL的describe命令返回的信息非常相似，它包含以下信息：</p>\n<p>下标    描述<br>Field    字段名称<br>Type    字段类型<br>Key    是否是主键或者索引<br>Null    是否允许为空<br>对于被支持的数据库系统，获取视图的信息的方法也被实现了：</p>\n<p>&lt;?php</p>\n<p>// 获取test_db数据库的视图<br>$tables = $connection-&gt;listViews(&quot;test_db&quot;);</p>\n<p>// &#39;robots&#39;视图是否存在数据库中<br>$exists = $connection-&gt;viewExists(&quot;robots&quot;);<br>创建/修改/删除表</p>\n<p>不同的数据库系统（MySQL,Postgresql等）通过了CREATE, ALTER 或 DROP命令提供了用于创建，修改或删除表的功能。但是不同的数据库语法不同。 :doc:<code>Phalcon\\\\Db &lt;../api/Phalcon_Db&gt;</code> 提供了统一的接口来改变表，而不需要区分基于目标存储系统上的SQL语法。</p>\n<p>创建数据库表（Creating Tables）</p>\n<p>下面这个例子展示了怎么建立一个表：</p>\n<p>&lt;?php</p>\n<p>use \\Phalcon\\Db\\Column as Column;</p>\n<p>$connection-&gt;createTable(<br>    &quot;robots&quot;,<br>    null,<br>    [<br>       &quot;columns&quot; =&gt; [<br>            new Column(<br>                &quot;id&quot;,<br>                [<br>                    &quot;type&quot;          =&gt; Column::TYPE_INTEGER,<br>                    &quot;size&quot;          =&gt; 10,<br>                    &quot;notNull&quot;       =&gt; true,<br>                    &quot;autoIncrement&quot; =&gt; true,<br>                    &quot;primary&quot;       =&gt; true,<br>                ]<br>            ),<br>            new Column(<br>                &quot;name&quot;,<br>                [<br>                    &quot;type&quot;    =&gt; Column::TYPE_VARCHAR,<br>                    &quot;size&quot;    =&gt; 70,<br>                    &quot;notNull&quot; =&gt; true,<br>                ]<br>            ),<br>            new Column(<br>                &quot;year&quot;,<br>                [<br>                    &quot;type&quot;    =&gt; Column::TYPE_INTEGER,<br>                    &quot;size&quot;    =&gt; 11,<br>                    &quot;notNull&quot; =&gt; true,<br>                ]<br>            ),<br>        ]<br>    ]<br>);<br>Phalcon\\Db::createTable() 接受一个描述数据库表相关的数组。字段被定义成class :doc:<code>Phalcon\\\\Db\\\\Column &lt;../api/Phalcon_Db_Column&gt;</code> 。 下表列出了可用于定义字段的选项：</p>\n<p>选项    描述    是否可选<br>&quot;type&quot;    字段类型，传入的值必须是 :doc:<code>Phalcon\\\\Db\\\\Column &lt;../api/Phalcon_Db_Column&gt;</code> 的常量值（看下面的列表）    不<br>&quot;primary&quot;    True的话表示列是表主键的一部分    是<br>&quot;size&quot;    字段的大小，像VARCHAR或者INTEGER类型需要用到    是<br>&quot;scale&quot;    指定字段存放多少位小数，DECIMAL或者NUMBER类型时需要用到    是<br>&quot;unsigned&quot;    是否有符号，INTEGER列可能需要设置是否有符号，该选项不适用于其他类型的列    是<br>&quot;notNull&quot;    字段是否可以储存null值（即是否为空）    是<br>&quot;default&quot;    Default value (when used with &quot;notNull&quot; =&gt; true).    是<br>&quot;autoIncrement&quot;    字段是否自增，设置了这个属性将自动填充自增整数，一个表只能设置一个列为自增属性    是<br>&quot;bind&quot;    字段类型绑定， BIND<em>TYPE</em>* 常量告诉数据库在保存数据前怎么绑定数据类型    是<br>&quot;first&quot;    把字段设置为表的第一位    是<br>&quot;after&quot;    设置字段放在指定字段的后面    是<br>:doc:<code>Phalcon\\\\Db &lt;../api/Phalcon_Db&gt;</code> 支持下面的数据库字段类型:</p>\n<p>Phalcon\\Db\\Column::TYPE_INTEGER<br>Phalcon\\Db\\Column::TYPE_DATE<br>Phalcon\\Db\\Column::TYPE_VARCHAR<br>Phalcon\\Db\\Column::TYPE_DECIMAL<br>Phalcon\\Db\\Column::TYPE_DATETIME<br>Phalcon\\Db\\Column::TYPE_CHAR<br>Phalcon\\Db\\Column::TYPE_TEXT<br>传入 Phalcon\\Db::createTable() 的相关数组可能含有的下标：</p>\n<p>下标    描述    是否可选<br>&quot;columns&quot;    一个数组包含表的所有字段，字段要定义成 :doc:<code>Phalcon\\\\Db\\\\Column &lt;../api/Phalcon_Db_Column&gt;</code>    不<br>&quot;indexes&quot;    一个数组包含表的所有索引，索引要定义成 :doc:<code>Phalcon\\\\Db\\\\Index &lt;../api/Phalcon_Db_Index&gt;</code>    是<br>&quot;references&quot;    一个数组包含表的所有外键，外键要定义成 :doc:<code>Phalcon\\\\Db\\\\Reference &lt;../api/Phalcon_Db_Reference&gt;</code>    是<br>&quot;options&quot;    一个表包含所有创建的选项. 这些选项常常和数据库迁移有关.    是<br>修改数据库表（Altering Tables）</p>\n<p>随着你的应用的增长，作为一个重构的一部分，或者增加新功能，你也许需要修改你的数据库。 因为不是所有的数据库允许你修改已存在的字段或者添加字段在2个已存在的字段之间。所以 :doc:<code>Phalcon\\\\Db &lt;../api/Phalcon_Db&gt;</code> 会受到数据库系统的这些限制。</p>\n<p>&lt;?php</p>\n<p>use Phalcon\\Db\\Column as Column;</p>\n<p>// 添加一个新的字段<br>$connection-&gt;addColumn(<br>    &quot;robots&quot;,<br>    null,<br>    new Column(<br>        &quot;robot_type&quot;,<br>        [<br>            &quot;type&quot;    =&gt; Column::TYPE_VARCHAR,<br>            &quot;size&quot;    =&gt; 32,<br>            &quot;notNull&quot; =&gt; true,<br>            &quot;after&quot;   =&gt; &quot;name&quot;,<br>        ]<br>    )<br>);</p>\n<p>// 修改一个已存在的字段<br>$connection-&gt;modifyColumn(<br>    &quot;robots&quot;,<br>    null,<br>    new Column(<br>        &quot;name&quot;,<br>        [<br>            &quot;type&quot;    =&gt; Column::TYPE_VARCHAR,<br>            &quot;size&quot;    =&gt; 40,<br>            &quot;notNull&quot; =&gt; true,<br>        ]<br>    )<br>);</p>\n<p>// 删除名为&quot;name&quot;的字段<br>$connection-&gt;dropColumn(<br>    &quot;robots&quot;,<br>    null,<br>    &quot;name&quot;<br>);<br>删除数据库表（Dropping Tables）</p>\n<p>删除数据库表的例子:</p>\n<p>&lt;?php</p>\n<p>// 删除&#39;robots&#39;表<br>$connection-&gt;dropTable(&quot;robots&quot;);</p>\n<p>// 删除数据库&#39;machines&#39;中的&#39;robots&#39;表<br>$connection-&gt;dropTable(&quot;robots&quot;, &quot;machines&quot;);</p>\n', '2017-12-12 15:44:19', '14', '0');
INSERT INTO `t_article` VALUES ('20', 'JAVA设计模式之单例模式', '<p>本文介绍23种设计模式系列之单例模式。<br>概念：<br>　　java中单例模式是一种常见的设计模式，单例模式的写法有好几种，这里主要介绍三种：懒汉式单例、饿汉式单例、登记式单例。<br>　　单例模式有以下特点：</p>\n<pre><code>   1. 单例类只能有一个实例。\n</code></pre><p>　　2、单例类必须自己创建自己的唯一实例。<br>　　3、单例类必须给所有其他对象提供这一实例。<br>　　单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。</p>\n<p>一、懒汉式单例</p>\n<blockquote>\n<p>[java] view plain<br>copy</p>\n<pre><code>1. //懒汉式单例类.在第一次调用的时候实例化自己   \n2. public class Singleton {  \n3.     private Singleton() {}  \n4.     private static Singleton single=null;  \n5.     //静态工厂方法   \n6.     public static Singleton getInstance() {  \n7.          if (single == null) {    \n8.              single = new Singleton();  \n9.          }    \n10.         return single;  \n11.     }  \n12. }  \n</code></pre></blockquote>\n<p>Singleton通过将构造方法限定为private避免了类在外部被实例化，在同一个虚拟机范围内，Singleton的唯一实例只能通过getInstance()方法访问。<br>（事实上，通过Java反射机制是能够实例化构造方法为private的类的，那基本上会使所有的Java单例实现失效。此问题在此处不做讨论，姑且掩耳盗铃地认为反射机制不存在。）<br>但是以上懒汉式单例的实现没有考虑线程安全问题，它是线程不安全的，并发环境下很可能出现多个Singleton实例，要实现线程安全，有以下三种方式，都是对getInstance这个方法改造，保证了懒汉式单例的线程安全，如果你第一次接触单例模式，对线程安全不是很了解，可以先跳过下面这三小条，去看饿汉式单例，等看完后面再回头考虑线程安全的问题：</p>\n<p>1、在getInstance方法上加同步<br>[java] view plain<br>copy</p>\n<pre><code>1. public static synchronized Singleton getInstance() {  \n2.          if (single == null) {    \n3.              single = new Singleton();  \n4.          }    \n5.         return single;  \n6. }  \n</code></pre><p>2、双重检查锁定<br>[java] view plain<br>copy</p>\n<pre><code>1. public static Singleton getInstance() {  \n2.         if (singleton == null) {    \n3.             synchronized (Singleton.class) {    \n4.                if (singleton == null) {    \n5.                   singleton = new Singleton();   \n6.                }    \n7.             }    \n8.         }    \n9.         return singleton;   \n10.     }  \n</code></pre><p>3、静态内部类<br>[java] view plain<br>copy</p>\n<pre><code>1. public class Singleton {    \n2.     private static class LazyHolder {    \n3.        private static final Singleton INSTANCE = new Singleton();    \n4.     }    \n5.     private Singleton (){}    \n6.     public static final Singleton getInstance() {    \n7.        return LazyHolder.INSTANCE;    \n8.     }    \n9. }    \n</code></pre><p>这种比上面1、2都好一些，既实现了线程安全，又避免了同步带来的性能影响。</p>\n<p>二、饿汉式单例<br>[java] view plain<br>copy</p>\n<pre><code>1. //饿汉式单例类.在类初始化时，已经自行实例化   \n2. public class Singleton1 {  \n3.     private Singleton1() {}  \n4.     private static final Singleton1 single = new Singleton1();  \n5.     //静态工厂方法   \n6.     public static Singleton1 getInstance() {  \n7.         return single;  \n8.     }  \n9. }  \n</code></pre><p>饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的。</p>\n<p>三、登记式单例(可忽略)<br>[java] view plain<br>copy</p>\n<pre><code>1. //类似Spring里面的方法，将类名注册，下次从里面直接获取。  \n2. public class Singleton3 {  \n3.     private static Map&lt;String,Singleton3&gt; map = new HashMap&lt;String,Singleton3&gt;();  \n4.     static{  \n5.         Singleton3 single = new Singleton3();  \n6.         map.put(single.getClass().getName(), single);  \n7.     }  \n8.     //保护的默认构造子  \n9.     protected Singleton3(){}  \n10.     //静态工厂方法,返还此类惟一的实例  \n11.     public static Singleton3 getInstance(String name) {  \n12.         if(name == null) {  \n13.             name = Singleton3.class.getName();  \n14.             System.out.println(&quot;name == null&quot;+&quot;---&gt;name=&quot;+name);  \n15.         }  \n16.         if(map.get(name) == null) {  \n17.             try {  \n18.                 map.put(name, (Singleton3) Class.forName(name).newInstance());  \n19.             } catch (InstantiationException e) {  \n20.                 e.printStackTrace();  \n21.             } catch (IllegalAccessException e) {  \n22.                 e.printStackTrace();  \n23.             } catch (ClassNotFoundException e) {  \n24.                 e.printStackTrace();  \n25.             }  \n26.         }  \n27.         return map.get(name);  \n28.     }  \n29.     //一个示意性的商业方法  \n30.     public String about() {      \n31.         return &quot;Hello, I am RegSingleton.&quot;;      \n32.     }      \n33.     public static void main(String[] args) {  \n34.         Singleton3 single3 = Singleton3.getInstance(null);  \n35.         System.out.println(single3.about());  \n36.     }  \n37. }  \n</code></pre><p> 登记式单例实际上维护了一组单例类的实例，将这些实例存放在一个Map（登记薄）中，对于已经登记过的实例，则从Map直接返回，对于没有登记的，则先登记，然后返回。<br>这里我对登记式单例标记了可忽略，我的理解来说，首先它用的比较少，另外其实内部实现还是用的饿汉式单例，因为其中的static方法块，它的单例在类被装载的时候就被实例化了。</p>\n<p>饿汉式和懒汉式区别<br>从名字上来说，饿汉和懒汉，<br>饿汉就是类一旦加载，就把单例初始化完成，保证getInstance的时候，单例是已经存在的了，<br>而懒汉比较懒，只有当调用getInstance的时候，才回去初始化这个单例。<br>另外从以下两点再区分以下这两种方式：</p>\n<p>1、线程安全：<br>饿汉式天生就是线程安全的，可以直接用于多线程而不会出现问题，<br>懒汉式本身是非线程安全的，为了实现线程安全有几种写法，分别是上面的1、2、3，这三种实现在资源加载和性能方面有些区别。</p>\n<p>2、资源加载和性能：<br>饿汉式在类创建的同时就实例化一个静态对象出来，不管之后会不会使用这个单例，都会占据一定的内存，但是相应的，在第一次调用时速度也会更快，因为其资源已经初始化完成，<br>而懒汉式顾名思义，会延迟加载，在第一次使用该单例的时候才会实例化对象出来，第一次调用时要做初始化，如果要做的工作比较多，性能上会有些延迟，之后就和饿汉式一样了。<br>至于1、2、3这三种实现又有些区别，<br>第1种，在方法调用上加了同步，虽然线程安全了，但是每次都要同步，会影响性能，毕竟99%的情况下是不需要同步的，<br>第2种，在getInstance中做了两次null检查，确保了只有第一次调用单例的时候才会做同步，这样也是线程安全的，同时避免了每次都同步的性能损耗<br>第3种，利用了classloader的机制来保证初始化instance时只有一个线程，所以也是线程安全的，同时没有性能损耗，所以一般我倾向于使用这一种。</p>\n<p>什么是线程安全？<br>如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。<br>或者说：一个类或者程序所提供的接口对于线程来说是原子操作，或者多个线程之间的切换不会导致该接口的执行结果存在二义性,也就是说我们不用考虑同步的问题，那就是线程安全的。</p>\n<p>应用<br>以下是一个单例类使用的例子，以懒汉式为例，这里为了保证线程安全，使用了双重检查锁定的方式：<br>[java] view plain<br>copy</p>\n<pre><code>1. public class TestSingleton {  \n2.     String name = null;  \n3.   \n4.         private TestSingleton() {  \n5.     }  \n6.   \n7.     private static volatile TestSingleton instance = null;  \n8.   \n9.     public static TestSingleton getInstance() {  \n10.            if (instance == null) {    \n11.              synchronized (TestSingleton.class) {    \n12.                 if (instance == null) {    \n13.                    instance = new TestSingleton();   \n14.                 }    \n15.              }    \n16.            }   \n17.            return instance;  \n18.     }  \n19.   \n20.     public String getName() {  \n21.         return name;  \n22.     }  \n23.   \n24.     public void setName(String name) {  \n25.         this.name = name;  \n26.     }  \n27.   \n28.     public void printInfo() {  \n29.         System.out.println(&quot;the name is &quot; + name);  \n30.     }  \n31.   \n32. }  \n</code></pre><p>可以看到里面加了volatile关键字来声明单例对象，既然synchronized已经起到了多线程下原子性、有序性、可见性的作用，为什么还要加volatile呢，原因已经在下面评论中提到，<br>还有疑问可参考<a href=\"http://www.iteye.com/topic/652440\">http://www.iteye.com/topic/652440</a><br>和<a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a></p>\n<p>[java] view plain<br>copy</p>\n<pre><code>1. public class TMain {  \n2.     public static void main(String[] args){  \n3.         TestStream ts1 = TestSingleton.getInstance();  \n4.         ts1.setName(&quot;jason&quot;);  \n5.         TestStream ts2 = TestSingleton.getInstance();  \n6.         ts2.setName(&quot;0539&quot;);  \n7.           \n8.         ts1.printInfo();  \n9.         ts2.printInfo();  \n10.           \n11.         if(ts1 == ts2){  \n12.             System.out.println(&quot;创建的是同一个实例&quot;);  \n13.         }else{  \n14.             System.out.println(&quot;创建的不是同一个实例&quot;);  \n15.         }  \n16.     }  \n17. }  \n</code></pre><p> 运行结果：<br>结论：由结果可以得知单例模式为一个面向对象的应用程序提供了对象惟一的访问点，不管它实现何种功能，整个应用程序都会同享一个实例对象。<br>对于单例模式的几种实现方式，知道饿汉式和懒汉式的区别，线程安全，资源加载的时机，还有懒汉式为了实现线程安全的3种方式的细微差别。</p>\n<p>更多设计模式：23种设计模式系列</p>\n<p>作者：jason0539<br>博客：<a href=\"http://blog.csdn.net/jason0539（转载请说明出处）\">http://blog.csdn.net/jason0539（转载请说明出处）</a></p>\n', '2017-12-12 15:44:21', '15', '0');
INSERT INTO `t_article` VALUES ('21', 'Volt 模版引擎（Volt: Template Engine）', '<p>Volt 是一个用C为PHP编写的超快的并且对设计师友好的模板语言。Volt 提供一组辅助工具有助于你以一种更简单的的方式编写视图（Views）。 同时，Volt与Phalcon的其他组件高度集成在一起，就像你在应用中单独使用Volt一样。<br><img src=\"/images/backgroundImg.jpghttp://\" alt=\"\"><br>../_static/img/volt.jpg<br>Volt is inspired by Jinja, originally created by Armin Ronacher. Therefore many developers will be in familiar territory using the same syntax they have been using with similar template engines. Volt&#39;s syntax and features have been enhanced with more elements and of course with the performance that developers have been accustomed to while working with Phalcon.<br>简介（Introduction）</p>\n<p>Volt 视图被编译成纯PHP代码，所以基本上他们节省手工编写PHP代码的工作：</p>\n<blockquote>\n<p>{# app/views/products/show.volt #}</p>\n<p>{% block last_products %}</p>\n<p>{% for product in products %}</p>\n<pre><code>* Name: {{ product.name|e }}\n{% if product.status === &quot;Active&quot; %}\n   Price: {{ product.price + product.taxes/100 }}\n{% endif  %}\n</code></pre><p>{% endfor  %}</p>\n<p>{% endblock %}<br>启用 Volt（Activating Volt）</p>\n</blockquote>\n<p>和其他模板引擎一样，你需要将Volt模板注册到视图组件中，并设置模板文件通用后缀名，或者直接使用标准的后缀名&quot;.phtml&quot;才能正常使用:</p>\n<blockquote>\n<p>&lt;?php</p>\n<p>use Phalcon\\Mvc\\View;<br>use Phalcon\\Mvc\\View\\Engine\\Volt;</p>\n<p>// Register Volt as a service<br>$di-&gt;set(<br>    &quot;voltService&quot;,<br>    function ($view, $di) {<br>        $volt = new Volt($view, $di);</p>\n<pre><code>    $volt-&gt;setOptions(\n        [\n            &quot;compiledPath&quot;      =&gt; &quot;../app/compiled-templates/&quot;,\n            &quot;compiledExtension&quot; =&gt; &quot;.compiled&quot;,\n        ]\n    );\n\n    return $volt;\n}\n</code></pre><p>);</p>\n<p>// Register Volt as template engine<br>$di-&gt;set(<br>    &quot;view&quot;,<br>    function () {<br>        $view = new View();</p>\n<pre><code>    $view-&gt;setViewsDir(&quot;../app/views/&quot;);\n\n    $view-&gt;registerEngines(\n        [\n            &quot;.volt&quot; =&gt; &quot;voltService&quot;,\n        ]\n    );\n\n    return $view;\n}\n</code></pre><p>);<br>使用标准的&quot;.phtml&quot; 后缀名:</p>\n<p>&lt;?php</p>\n<p>$view-&gt;registerEngines(<br>    [<br>        &quot;.phtml&quot; =&gt; &quot;voltService&quot;,<br>    ]<br>);<br>You don&#39;t have to specify the Volt Service in the DI; you can also use the Volt engine with the default settings:</p>\n<p>&lt;?php</p>\n<p>$view-&gt;registerEngines(<br>    [<br>        &quot;.volt&quot; =&gt; &quot;Phalcon\\Mvc\\View\\Engine\\Volt&quot;,<br>    ]<br>);<br>If you do not want to reuse Volt as a service, you can pass an anonymous function to register the engine instead of a service name:</p>\n<p>&lt;?php</p>\n<p>use Phalcon\\Mvc\\View;<br>use Phalcon\\Mvc\\View\\Engine\\Volt;</p>\n<p>// Register Volt as template engine with an anonymous function<br>$di-&gt;set(<br>    &quot;view&quot;,<br>    function () {<br>        $view = new \\Phalcon\\Mvc\\View();</p>\n<pre><code>    $view-&gt;setViewsDir(&quot;../app/views/&quot;);\n\n    $view-&gt;registerEngines(\n        [\n            &quot;.volt&quot; =&gt; function ($view, $di) {\n                $volt = new Volt($view, $di);\n\n                // Set some options here\n\n                return $volt;\n            }\n        ]\n    );\n\n    return $view;\n}\n</code></pre><p>);<br>The following options are available in Volt:</p>\n</blockquote>\n<p>Option    Description    Default<br>compiledPath    A writable path where the compiled PHP templates will be placed    ./<br>compiledExtension    An additional extension appended to the compiled PHP file    .php<br>compiledSeparator    Volt replaces the directory separators / and \\ by this separator in order to create a single file in the compiled directory    %%<br>stat    Whether Phalcon must check if exists differences between the template file and its compiled path    true<br>compileAlways    Tell Volt if the templates must be compiled in each request or only when they change    false<br>prefix    Allows to prepend a prefix to the templates in the compilation path    null<br>autoescape    Enables globally autoescape of HTML    false<br>The compilation path is generated according to the above options, if the developer wants total freedom defining the compilation path, an anonymous function can be used to generate it, this function receives the relative path to the template in the views directory. The following examples show how to change the compilation path dynamically:</p>\n<blockquote>\n<p>&lt;?php</p>\n<p>// Just append the .php extension to the template path<br>// leaving the compiled templates in the same directory<br>$volt-&gt;setOptions(<br>    [<br>        &quot;compiledPath&quot; =&gt; function ($templatePath) {<br>            return $templatePath . &quot;.php&quot;;<br>        }<br>    ]<br>);</p>\n<p>// Recursively create the same structure in another directory<br>$volt-&gt;setOptions(<br>    [<br>        &quot;compiledPath&quot; =&gt; function ($templatePath) {<br>            $dirName = dirname($templatePath);</p>\n<pre><code>        if (!is_dir(&quot;cache/&quot; . $dirName)) {\n            mkdir(&quot;cache/&quot; . $dirName);\n        }\n\n        return &quot;cache/&quot; . $dirName . &quot;/&quot;. $templatePath . &quot;.php&quot;;\n    }\n]\n</code></pre><p>);<br>基本用法（Basic Usage）</p>\n</blockquote>\n<p>视图通常由Volt模板代码和HTML代码生成，甚至也含有PHP代码。Volt模板中有一些特殊分隔符的用法: {% ... %} 用于执行流程控制语句如if判断、for循环及赋值处理等等， {{ ... }} 用于在模板中输出表达式的执行结果。</p>\n<p>下面例子介绍了一些基础用法:</p>\n<p>{# app/views/posts/show.phtml #}<br>&lt;!DOCTYPE html&gt;</p>\n<p><html><br>    <head><br>        <title>{{ title }} - An example blog</title><br>    </head><br>    <body></p>\n<pre><code>    {% if show_navigation %}\n        &lt;ul id=&quot;navigation&quot;&gt;\n            {% for item in menu %}\n                &lt;li&gt;\n                    &lt;a href=&quot;{{ item.href }}&quot;&gt;\n                        {{ item.caption }}\n                    &lt;/a&gt;\n                &lt;/li&gt;\n            {% endfor %}\n        &lt;/ul&gt;\n    {% endif %}\n\n    &lt;h1&gt;{{ post.title }}&lt;/h1&gt;\n\n    &lt;div class=&quot;content&quot;&gt;\n        {{ post.content }}\n    &lt;/div&gt;\n\n&lt;/body&gt;\n</code></pre><p></html><br>使用 :doc:<code>Phalcon\\\\Mvc\\\\View &lt;../api/Phalcon_Mvc_View&gt;</code> 实例可以从控制器中把变量传递给视图。 在下面的示例中，有四个变量传递给了视图: show_navigation, menu, title and post:</p>\n<p>&lt;?php</p>\n<p>use Phalcon\\Mvc\\Controller;</p>\n<p>class PostsController extends Controller<br>{<br>    public function showAction()<br>    {<br>        $post = Post::findFirst();<br>        $menu = Menu::findFirst();</p>\n<pre><code>    $this-&gt;view-&gt;show_navigation = true;\n    $this-&gt;view-&gt;menu            = $menu;\n    $this-&gt;view-&gt;title           = $post-&gt;title;\n    $this-&gt;view-&gt;post            = $post;\n\n    // Or...\n\n    $this-&gt;view-&gt;setVar(&quot;show_navigation&quot;, true);\n    $this-&gt;view-&gt;setVar(&quot;menu&quot;,            $menu);\n    $this-&gt;view-&gt;setVar(&quot;title&quot;,           $post-&gt;title);\n    $this-&gt;view-&gt;setVar(&quot;post&quot;,            $post);\n}\n</code></pre><p>}<br>变量（Variables）</p>\n<p>对象变量可能有一些属性值，可以使用 foo.bar 的方式来访问。如果传递的是一个数组变量，则必须使用 foo[&#39;bar&#39;] 的方式来访问。</p>\n<p>{{ post.title }} {# for $post-&gt;title #}<br>{{ post[&#39;title&#39;] }} {# for $post[&#39;title&#39;] #}<br>过滤器（Filters）</p>\n<p>模板中的变量可以通过过滤器进行格式化。操作符 | 适用于对变量进行格式化:</p>\n<p>{{ post.title|e }}<br>{{ post.content|striptags }}<br>{{ name|capitalize|trim }}<br>以下是Volt模板内置的过滤器列表:</p>\n<p>Filter    Description<br>e    Applies Phalcon\\Escaper-&gt;escapeHtml() to the value<br>escape    Applies Phalcon\\Escaper-&gt;escapeHtml() to the value<br>escape_css    Applies Phalcon\\Escaper-&gt;escapeCss() to the value<br>escape_js    Applies Phalcon\\Escaper-&gt;escapeJs() to the value<br>escape_attr    Applies Phalcon\\Escaper-&gt;escapeHtmlAttr() to the value<br>trim    Applies the trim PHP function to the value. Removing extra spaces<br>left_trim    Applies the ltrim PHP function to the value. Removing extra spaces<br>right_trim    Applies the rtrim PHP function to the value. Removing extra spaces<br>striptags    Applies the striptags PHP function to the value. Removing HTML tags<br>slashes    Applies the slashes PHP function to the value. Escaping values<br>stripslashes    Applies the stripslashes PHP function to the value. Removing escaped quotes<br>capitalize    Capitalizes a string by applying the ucwords PHP function to the value<br>lower    Change the case of a string to lowercase<br>upper    Change the case of a string to uppercase<br>length    Counts the string length or how many items are in an array or object<br>nl2br    Changes newlines \\n by line breaks (<br />). Uses the PHP function nl2br<br>sort    Sorts an array using the PHP function asort<br>keys    Returns the array keys using array_keys<br>join    Joins the array parts using a separator join<br>format    Formats a string using sprintf.<br>json_encode    Converts a value into its JSON representation<br>json_decode    Converts a value from its JSON representation to a PHP representation<br>abs    Applies the abs PHP function to a value.<br>url_encode    Applies the urlencode PHP function to the value<br>default    Sets a default value in case that the evaluated expression is empty (is not set or evaluates to a falsy value)<br>convert_encoding    Converts a string from one charset to another<br>Examples:</p>\n<p>{# e or escape filter #}<br>{{ &quot;<h1>Hello<h1>&quot;|e }}<br>{{ &quot;<h1>Hello<h1>&quot;|escape }}</p>\n<p>{# trim filter #}<br>{{ &quot;   hello   &quot;|trim }}</p>\n<p>{# striptags filter #}<br>{{ &quot;<h1>Hello<h1>&quot;|striptags }}</p>\n<p>{# slashes filter #}<br>{{ &quot;&#39;this is a string&#39;&quot;|slashes }}</p>\n<p>{# stripslashes filter #}<br>{{ &quot;\\&#39;this is a string\\&#39;&quot;|stripslashes }}</p>\n<p>{# capitalize filter #}<br>{{ &quot;hello&quot;|capitalize }}</p>\n<p>{# lower filter #}<br>{{ &quot;HELLO&quot;|lower }}</p>\n<p>{# upper filter #}<br>{{ &quot;hello&quot;|upper }}</p>\n<p>{# length filter #}<br>{{ &quot;robots&quot;|length }}<br>{{ [1, 2, 3]|length }}</p>\n<p>{# nl2br filter #}<br>{{ &quot;some\\ntext&quot;|nl2br }}</p>\n<p>{# sort filter #}<br>{% set sorted = [3, 1, 2]|sort %}</p>\n<p>{# keys filter #}<br>{% set keys = [&#39;first&#39;: 1, &#39;second&#39;: 2, &#39;third&#39;: 3]|keys %}</p>\n<p>{# join filter #}<br>{% set joined = &quot;a&quot;..&quot;z&quot;|join(&quot;,&quot;) %}</p>\n<p>{# format filter #}<br>{{ &quot;My real name is %s&quot;|format(name) }}</p>\n<p>{# json_encode filter #}<br>{% set encoded = robots|json_encode %}</p>\n<p>{# json_decode filter #}<br>{% set decoded = &#39;{&quot;one&quot;:1,&quot;two&quot;:2,&quot;three&quot;:3}&#39;|json_decode %}</p>\n<p>{# url_encode filter #}<br>{{ post.permanent_link|url_encode }}</p>\n<p>{# convert_encoding filter #}<br>{{ &quot;désolé&quot;|convert_encoding(&#39;utf8&#39;, &#39;latin1&#39;) }}<br>注释（Comments）</p>\n<p>Comments may also be added to a template using the {# ... #} delimiters. All text inside them is just ignored in the final output:</p>\n<p>{# note: this is a comment<br>    {% set price = 100; %}</p>\n<p>#}<br>流程控制列表（List of Control Structures）</p>\n<p>Volt provides a set of basic but powerful control structures for use in templates:</p>\n<p>循环语句 For</p>\n<p>Loop over each item in a sequence. The following example shows how to traverse a set of &quot;robots&quot; and print his/her name:</p>\n<h1>Robots</h1><br><ul><br>    {% for robot in robots %}<br>        <li><br>            {{ robot.name|e }}<br>        </li><br>    {% endfor %}<br></ul><br>for-loops can also be nested:<br><br><h1>Robots</h1><br>{% for robot in robots %}<br>    {% for part in robot.parts %}<br>        Robot: {{ robot.name|e }} Part: {{ part.name|e }} <br /><br>    {% endfor %}<br>{% endfor %}<br>You can get the element &quot;keys&quot; as in the PHP counterpart using the following syntax:<br><br>{% set numbers = [&#39;one&#39;: 1, &#39;two&#39;: 2, &#39;three&#39;: 3] %}<br><br>{% for name, value in numbers %}<br>    Name: {{ name }} Value: {{ value }}<br>{% endfor %}<br>An &quot;if&quot; evaluation can be optionally set:<br><br>{% set numbers = [&#39;one&#39;: 1, &#39;two&#39;: 2, &#39;three&#39;: 3] %}<br><br>{% for value in numbers if value &lt; 2 %}<br>    Value: {{ value }}<br>{% endfor %}<br><br>{% for name, value in numbers if name !== &#39;two&#39; %}<br>    Name: {{ name }} Value: {{ value }}<br>{% endfor %}<br>If an &#39;else&#39; is defined inside the &#39;for&#39;, it will be executed if the expression in the iterator result in zero iterations:<br><br><h1>Robots</h1><br>{% for robot in robots %}<br>    Robot: {{ robot.name|e }} Part: {{ part.name|e }} <br /><br>{% else %}<br>    There are no robots to show<br>{% endfor %}<br>Alternative syntax:<br><br><h1>Robots</h1><br>{% for robot in robots %}<br>    Robot: {{ robot.name|e }} Part: {{ part.name|e }} <br /><br>{% elsefor %}<br>    There are no robots to show<br>{% endfor %}<br>循环控制（Loop Controls）<br><br>The &#39;break&#39; and &#39;continue&#39; statements can be used to exit from a loop or force an iteration in the current block:<br><br>{# skip the even robots #}<br>{% for index, robot in robots %}<br>    {% if index is even %}<br>        {% continue %}<br>    {% endif %}<br>    ...<br>{% endfor %}<br>{# exit the foreach on the first even robot #}<br>{% for index, robot in robots %}<br>    {% if index is even %}<br>        {% break %}<br>    {% endif %}<br>    ...<br>{% endfor %}<br>条件判断语句 If<br><br>As PHP, an &quot;if&quot; statement checks if an expression is evaluated as true or false:<br><br><h1>Cyborg Robots</h1><br><ul><br>    {% for robot in robots %}<br>        {% if robot.type === &quot;cyborg&quot; %}<br>            <li>{{ robot.name|e }}</li><br>        {% endif %}<br>    {% endfor %}<br></ul><br>The else clause is also supported:<br><br><h1>Robots</h1><br><ul><br>    {% for robot in robots %}<br>        {% if robot.type === &quot;cyborg&quot; %}<br>            <li>{{ robot.name|e }}</li><br>        {% else %}<br>            <li>{{ robot.name|e }} (not a cyborg)</li><br>        {% endif %}<br>    {% endfor %}<br></ul><br>The &#39;elseif&#39; control flow structure can be used together with if to emulate a &#39;switch&#39; block:<br><br>{% if robot.type === &quot;cyborg&quot; %}<br>    Robot is a cyborg<br>{% elseif robot.type === &quot;virtual&quot; %}<br>    Robot is virtual<br>{% elseif robot.type === &quot;mechanical&quot; %}<br>    Robot is mechanical<br>{% endif %}<br>循环上下文（Loop Context）<br><br>A special variable is available inside &#39;for&#39; loops providing you information about<br><br>Variable    Description<br>loop.index    The current iteration of the loop. (1 indexed)<br>loop.index0    The current iteration of the loop. (0 indexed)<br>loop.revindex    The number of iterations from the end of the loop (1 indexed)<br>loop.revindex0    The number of iterations from the end of the loop (0 indexed)<br>loop.first    True if in the first iteration.<br>loop.last    True if in the last iteration.<br>loop.length    The number of items to iterate<br>{% for robot in robots %}<br>    {% if loop.first %}<br>        <table><br>            <tr><br>                <th>#</th><br>                <th>Id</th><br>                <th>Name</th><br>            </tr><br>    {% endif %}<br>            <tr><br>                <td>{{ loop.index }}</td><br>                <td>{{ robot.id }}</td><br>                <td>{{ robot.name }}</td><br>            </tr><br>    {% if loop.last %}<br>        </table><br>    {% endif %}<br>{% endfor %}<br>赋值（Assignments）<br><br>Variables may be changed in a template using the instruction &quot;set&quot;:<br><br>{% set fruits = [&#39;Apple&#39;, &#39;Banana&#39;, &#39;Orange&#39;] %}<br><br>{% set name = robot.name %}<br>Multiple assignments are allowed in the same instruction:<br><br>{% set fruits = [&#39;Apple&#39;, &#39;Banana&#39;, &#39;Orange&#39;], name = robot.name, active = true %}<br>Additionally, you can use compound assignment operators:<br><br>{% set price += 100.00 %}<br><br>{% set age <em>= 5 %}<br>The following operators are available:<br><br>Operator    Description<br>=    Standard Assignment<br>+=    Addition assignment<br>-=    Subtraction assignment\n</em>=    Multiplication assignment<br>/=    Division assignment<br>表达式（Expressions）<br><br>Volt provides a basic set of expression support, including literals and common operators.<br><br>A expression can be evaluated and printed using the &#39;{{&#39; and &#39;}}&#39; delimiters:<br><br>{{ (1 + 1) <em> 2 }}<br>If an expression needs to be evaluated without be printed the &#39;do&#39; statement can be used:<br><br>{% do (1 + 1) </em> 2 %}<br>字面值（Literals）<br><br>The following literals are supported:<br><br>Filter    Description<br>&quot;this is a string&quot;    Text between double quotes or single quotes are handled as strings<br>100.25    Numbers with a decimal part are handled as doubles/floats<br>100    Numbers without a decimal part are handled as integers<br>false    Constant &quot;false&quot; is the boolean false value<br>true    Constant &quot;true&quot; is the boolean true value<br>null    Constant &quot;null&quot; is the Null value<br>数组（Arrays）<br><br>Whether you&#39;re using PHP 5.3 or &gt;= 5.4 you can create arrays by enclosing a list of values in square brackets:<br><br>{# Simple array #}<br>{{ [&#39;Apple&#39;, &#39;Banana&#39;, &#39;Orange&#39;] }}<br><br>{# Other simple array #}<br>{{ [&#39;Apple&#39;, 1, 2.5, false, null] }}<br><br>{# Multi-Dimensional array #}<br>{{ [[1, 2], [3, 4], [5, 6]] }}<br><br>{# Hash-style array #}<br>{{ [&#39;first&#39;: 1, &#39;second&#39;: 4/2, &#39;third&#39;: &#39;3&#39;] }}<br>花括号也能用来定义数组或关联数组:<br><br>{% set myArray = {&#39;Apple&#39;, &#39;Banana&#39;, &#39;Orange&#39;} %}<br>{% set myHash  = {&#39;first&#39;: 1, &#39;second&#39;: 4/2, &#39;third&#39;: &#39;3&#39;} %}<br>算术运算（Math）<br><br>你可以在模板里面使用下列操作符来进行算术运算:<br><br>Operator    Description<br>+    Perform an adding operation. {{ 2 + 3 }} returns 5<br>-    Perform a substraction operation {{ 2 - 3 }} returns -1<br><em>    Perform a multiplication operation {{ 2 </em> 3 }} returns 6<br>/    Perform a division operation {{ 10 / 2 }} returns 5<br>%    Calculate the remainder of an integer division {{ 10 % 3 }} returns 1<br>比较运算（Comparisons）<br><br>The following comparison operators are available:<br><br>Operator    Description<br>==    Check whether both operands are equal<br>!=    Check whether both operands aren&#39;t equal<br>&lt;&gt;    Check whether both operands aren&#39;t equal<br>&gt;    Check whether left operand is greater than right operand<br>&lt;    Check whether left operand is less than right operand<br>&lt;=    Check whether left operand is less or equal than right operand<br>&gt;=    Check whether left operand is greater or equal than right operand<br>===    Check whether both operands are identical<br>!==    Check whether both operands aren&#39;t identical<br>逻辑运算（Logic）<br><br>Logic operators are useful in the &quot;if&quot; expression evaluation to combine multiple tests:<br><br>Operator    Description<br>or    Return true if the left or right operand is evaluated as true<br>and    Return true if both left and right operands are evaluated as true<br>not    Negates an expression<br>( expr )    Parenthesis groups expressions<br>其他操作（Other Operators）<br><br>Additional operators seen the following operators are available:<br><br>Operator    Description<br>~    Concatenates both operands {{ &quot;hello &quot; ~ &quot;world&quot; }}<br>|    Applies a filter in the right operand to the left {{ &quot;hello&quot;|uppercase }}<br>..    Creates a range {{ &#39;a&#39;..&#39;z&#39; }} {{ 1..10 }}<br>is    Same as == (equals), also performs tests<br>in    To check if an expression is contained into other expressions if &quot;a&quot; in &quot;abc&quot;<br>is not    Same as != (not equals)<br>&#39;a&#39; ? &#39;b&#39; : &#39;c&#39;    Ternary operator. The same as the PHP ternary operator<br>++    Increments a value<br>--    Decrements a value<br>下面的示例显示了如何使用操作符:<br><br>{% set robots = [&#39;Voltron&#39;, &#39;Astro Boy&#39;, &#39;Terminator&#39;, &#39;C3PO&#39;] %}<br><br>{% for index in 0..robots|length %}<br>    {% if robots[index] is defined %}<br>        {{ &quot;Name: &quot; ~ robots[index] }}<br>    {% endif %}<br>{% endfor %}<br>测试运算（Tests）<br><br>Tests can be used to test if a variable has a valid expected value. The operator &quot;is&quot; is used to perform the tests:<br><br>{% set robots = [&#39;1&#39;: &#39;Voltron&#39;, &#39;2&#39;: &#39;Astro Boy&#39;, &#39;3&#39;: &#39;Terminator&#39;, &#39;4&#39;: &#39;C3PO&#39;] %}<br><br>{% for position, name in robots %}<br>    {% if position is odd %}<br>        {{ name }}<br>    {% endif %}<br>{% endfor %}<br>The following built-in tests are available in Volt:<br><br>Test    Description<br>defined    Checks if a variable is defined (isset())<br>empty    Checks if a variable is empty<br>even    Checks if a numeric value is even<br>odd    Checks if a numeric value is odd<br>numeric    Checks if value is numeric<br>scalar    Checks if value is scalar (not an array or object)<br>iterable    Checks if a value is iterable. Can be traversed by a &quot;for&quot; statement<br>divisibleby    Checks if a value is divisible by other value<br>sameas    Checks if a value is identical to other value<br>type    Checks if a value is of the specified type<br>More examples:<br><br>{% if robot is defined %}<br>    The robot variable is defined<br>{% endif %}<br><br>{% if robot is empty %}<br>    The robot is null or isn&#39;t defined<br>{% endif %}<br><br>{% for key, name in [1: &#39;Voltron&#39;, 2: &#39;Astroy Boy&#39;, 3: &#39;Bender&#39;] %}<br>    {% if key is even %}<br>        {{ name }}<br>    {% endif %}<br>{% endfor %}<br><br>{% for key, name in [1: &#39;Voltron&#39;, 2: &#39;Astroy Boy&#39;, 3: &#39;Bender&#39;] %}<br>    {% if key is odd %}<br>        {{ name }}<br>    {% endif %}<br>{% endfor %}<br><br>{% for key, name in [1: &#39;Voltron&#39;, 2: &#39;Astroy Boy&#39;, &#39;third&#39;: &#39;Bender&#39;] %}<br>    {% if key is numeric %}<br>        {{ name }}<br>    {% endif %}<br>{% endfor %}<br><br>{% set robots = [1: &#39;Voltron&#39;, 2: &#39;Astroy Boy&#39;] %}<br>{% if robots is iterable %}<br>    {% for robot in robots %}<br>        ...<br>    {% endfor %}<br>{% endif %}<br><br>{% set world = &quot;hello&quot; %}<br>{% if world is sameas(&quot;hello&quot;) %}<br>    {{ &quot;it&#39;s hello&quot; }}<br>{% endif %}<br><br>{% set external = false %}<br>{% if external is type(&#39;boolean&#39;) %}<br>    {{ &quot;external is false or true&quot; }}<br>{% endif %}<br>宏定义（Macros）<br><br>Macros can be used to reuse logic in a template, they act as PHP functions, can receive parameters and return values:<br><br>{# Macro &quot;display a list of links to related topics&quot; #}<br>{%- macro related_bar(related_links) %}<br>    <ul><br>        {%- for link in related_links %}<br>            <li><br>                <a href=\"{{ url(link.url) }}\" title=\"{{ link.title|striptags }}\"><br>                    {{ link.text }}<br>                </a><br>            </li><br>        {%- endfor %}<br>    </ul><br>{%- endmacro %}<br><br>{# Print related links #}<br>{{ related_bar(links) }}<br><br><div>This is the content</div><br><br>{# Print related links again #}<br>{{ related_bar(links) }}<br>When calling macros, parameters can be passed by name:<br><br>{%- macro error_messages(message, field, type) %}<br>    <div><br>        <span class=\"error-type\">{{ type }}</span><br>        <span class=\"error-field\">{{ field }}</span><br>        <span class=\"error-message\">{{ message }}</span><br>    </div><br>{%- endmacro %}<br><br>{# Call the macro #}<br>{{ error_messages(&#39;type&#39;: &#39;Invalid&#39;, &#39;message&#39;: &#39;The name is invalid&#39;, &#39;field&#39;: &#39;name&#39;) }}<br>Macros can return values:<br><br>{%- macro my_input(name, class) %}<br>    {% return text_field(name, &#39;class&#39;: class) %}<br>{%- endmacro %}<br><br>{# Call the macro #}<br>{{ &#39;<p>&#39; ~ my_input(&#39;name&#39;, &#39;input-text&#39;) ~ &#39;</p>&#39; }}<br>And receive optional parameters:<br><br>{%- macro my_input(name, class=&quot;input-text&quot;) %}<br>    {% return text_field(name, &#39;class&#39;: class) %}<br>{%- endmacro %}<br><br>{# Call the macro #}<br>{{ &#39;<p>&#39; ~ my_input(&#39;name&#39;) ~ &#39;</p>&#39; }}<br>{{ &#39;<p>&#39; ~ my_input(&#39;name&#39;, &#39;input-text&#39;) ~ &#39;</p>&#39; }}<br>使用标签助手（Using Tag Helpers）<br><br>Volt is highly integrated with :doc:<code>Phalcon\\\\Tag &lt;tags&gt;</code>, so it&#39;s easy to use the helpers provided by that component in a Volt template:<br><br>{{ javascript_include(&quot;js/jquery.js&quot;) }}<br><br>{{ form(&#39;products/save&#39;, &#39;method&#39;: &#39;post&#39;) }}<br><br>    <label for=\"name\">Name</label><br>    {{ text_field(&quot;name&quot;, &quot;size&quot;: 32) }}<br><br>    <label for=\"type\">Type</label><br>    {{ select(&quot;type&quot;, productTypes, &#39;using&#39;: [&#39;id&#39;, &#39;name&#39;]) }}<br><br>    {{ submit_button(&#39;Send&#39;) }}<br><br>{{ end_form() }}<br>The following PHP is generated:<br><br>&lt;?php echo Phalcon\\Tag::javascriptInclude(&quot;js/jquery.js&quot;) ?&gt;<br><br>&lt;?php echo Phalcon\\Tag::form(array(&#39;products/save&#39;, &#39;method&#39; =&gt; &#39;post&#39;)); ?&gt;<br><br>    <label for=\"name\">Name</label><br>    &lt;?php echo Phalcon\\Tag::textField(array(&#39;name&#39;, &#39;size&#39; =&gt; 32)); ?&gt;<br><br>    <label for=\"type\">Type</label><br>    &lt;?php echo Phalcon\\Tag::select(array(&#39;type&#39;, $productTypes, &#39;using&#39; =&gt; array(&#39;id&#39;, &#39;name&#39;))); ?&gt;<br><br>    &lt;?php echo Phalcon\\Tag::submitButton(&#39;Send&#39;); ?&gt;<br><br>{{ end_form() }}<br>To call a :doc:<code>Phalcon\\\\Tag &lt;../api/Phalcon_Tag&gt;</code> helper, you only need to call an uncamelized version of the method:<br><br>Method    Volt function<br>Phalcon\\Tag::linkTo    link_to<br>Phalcon\\Tag::textField    text_field<br>Phalcon\\Tag::passwordField    password_field<br>Phalcon\\Tag::hiddenField    hidden_field<br>Phalcon\\Tag::fileField    file_field<br>Phalcon\\Tag::checkField    check_field<br>Phalcon\\Tag::radioField    radio_field<br>Phalcon\\Tag::dateField    date_field<br>Phalcon\\Tag::emailField    email_field<br>Phalcon\\Tag::numericField    numeric_field<br>Phalcon\\Tag::submitButton    submit_button<br>Phalcon\\Tag::selectStatic    select_static<br>Phalcon\\Tag::select    select<br>Phalcon\\Tag::textArea    text_area<br>Phalcon\\Tag::form    form<br>Phalcon\\Tag::endForm    end_form<br>Phalcon\\Tag::getTitle    get_title<br>Phalcon\\Tag::stylesheetLink    stylesheet_link<br>Phalcon\\Tag::javascriptInclude    javascript_include<br>Phalcon\\Tag::image    image<br>Phalcon\\Tag::friendlyTitle    friendly_title<br>函数（Functions）<br><br>The following built-in functions are available in Volt:<br><br>Name    Description<br>content    Includes the content produced in a previous rendering stage<br>get_content    Same as content<br>partial    Dynamically loads a partial view in the current template<br>super    Render the contents of the parent block<br>time    Calls the PHP function with the same name<br>date    Calls the PHP function with the same name<br>dump    Calls the PHP function var_dump()<br>version    Returns the current version of the framework<br>constant    Reads a PHP constant<br>url    Generate a URL using the &#39;url&#39; service<br>视图集成（View Integration）<br><br>Also, Volt is integrated with :doc:<code>Phalcon\\\\Mvc\\\\View &lt;views&gt;</code>, you can play with the view hierarchy and include partials as well:<br><br>{{ content() }}<br><br><!-- Simple include of a partial --><br><div id=\"footer\">{{ partial(&quot;partials/footer&quot;) }}</div><br><br><!-- Passing extra variables --><br><div id=\"footer\">{{ partial(&quot;partials/footer&quot;, [&#39;links&#39;: links]) }}</div><br>A partial is included in runtime, Volt also provides &quot;include&quot;, this compiles the content of a view and returns its contents as part of the view which was included:<br><br>{# Simple include of a partial #}<br><div id=\"footer\"><br>    {% include &quot;partials/footer&quot; %}<br></div><br><br>{# Passing extra variables #}<br><div id=\"footer\"><br>    {% include &quot;partials/footer&quot; with [&#39;links&#39;: links] %}<br></div><br>包含（Include）<br><br>&#39;include&#39; has a special behavior that will help us improve performance a bit when using Volt, if you specify the extension when including the file and it exists when the template is compiled, Volt can inline the contents of the template in the parent template where it&#39;s included. Templates aren&#39;t inlined if the &#39;include&#39; have variables passed with &#39;with&#39;:<br><br>{# The contents of &#39;partials/footer.volt&#39; is compiled and inlined #}<br><div id=\"footer\"><br>    {% include &quot;partials/footer.volt&quot; %}<br></div><br>Partial vs Include<br><br>Keep the following points in mind when choosing to use the &quot;partial&quot; function or &quot;include&quot;:<br><br>&#39;Partial&#39; 既可以引入Volt模板，也可以引入其他模板引擎的模板<br>&#39;Partial&#39; 在引入模板的时候，可以传递表达式（如变量）<br>&#39;Partial&#39; 更适合引入经常有变动的模板<br>&#39;Include&#39; 是引入编译后的模板内容，以提升性能<br>&#39;Include&#39; 只能引入Volt模板<br>&#39;Include&#39; 在编译时须引入现有的模板<br>模版的继承（Template Inheritance）<br><br>你可以创建基础模板，供其他模板继承，达到代码复用的目的。在基础模板中使用 block 定义代码块，则子模板可以实现重写功能。 我们假设有一个这样的基础模板:<br><br>{# templates/base.volt #}<br>&lt;!DOCTYPE html&gt;<br><html><br>    <head><br>        {% block head %}<br>            <link rel=\"stylesheet\" href=\"style.css\" /><br>        {% endblock %}<br><br>        <title>{% block title %}{% endblock %} - My Webpage</title><br>    </head><br><br>    <body><br>        <div id=\"content\">{% block content %}{% endblock %}</div><br><br>        <div id=\"footer\"><br>            {% block footer %}&copy; Copyright 2015, All rights reserved.{% endblock %}<br>        </div><br>    </body><br></html><br>其他的模板继承了基础模板后，会重写基础模板中的 block 代码块:<br><br>{% extends &quot;templates/base.volt&quot; %}<br><br>{% block title %}Index{% endblock %}<br><br>{% block head %}<style type=\"text/css\">.important { color: #336699; }</style>{% endblock %}<br><br>{% block content %}<br>    <h1>Index</h1><br>    <p class=\"important\">Welcome on my awesome homepage.</p><br>{% endblock %}<br>在子模板中并不需要全部重写基础模板中的 block 块，按需要重写部分即可。最终输出如下示例:<br><br>&lt;!DOCTYPE html&gt;<br><html><br>    <head><br>        <style type=\"text/css\">.important { color: #336699; }</style><br><br>        <title>Index - My Webpage</title><br>    </head><br><br>    <body><br>        <div id=\"content\"><br>            <h1>Index</h1><br>            <p class=\"important\">Welcome on my awesome homepage.</p><br>        </div><br><br>        <div id=\"footer\"><br>            &copy; Copyright 2015, All rights reserved.<br>        </div><br>    </body><br></html><br>多重继承（Multiple Inheritance）<br><br>子模板也可以被其他模板继承，下面的示例演示了模板的多重继承:<br><br>{# main.volt #}<br>&lt;!DOCTYPE html&gt;<br><html><br>    <head><br>        <title>Title</title><br>    </head><br><br>    <body><br>        {% block content %}{% endblock %}<br>    </body><br></html><br>&quot;layout.volt&quot; 继承 &quot;main.volt&quot;<br><br>{# layout.volt #}<br>{% extends &quot;main.volt&quot; %}<br><br>{% block content %}<br><br>    <h1>Table of contents</h1>\n\n<p>{% endblock %}<br>&quot;index.volt&quot; 又继承了 &quot;layout.volt&quot;:</p>\n<p>{# index.volt #}<br>{% extends &quot;layout.volt&quot; %}</p>\n<p>{% block content %}</p>\n<pre><code>{{ super() }}\n\n&lt;ul&gt;\n    &lt;li&gt;Some option&lt;/li&gt;\n    &lt;li&gt;Some other option&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre><p>{% endblock %}<br>渲染 &quot;index.volt&quot; 后输出:</p>\n<p>&lt;!DOCTYPE html&gt;</p>\n<p><html><br>    <head><br>        <title>Title</title><br>    </head></p>\n<pre><code>&lt;body&gt;\n\n    &lt;h1&gt;Table of contents&lt;/h1&gt;\n\n    &lt;ul&gt;\n        &lt;li&gt;Some option&lt;/li&gt;\n        &lt;li&gt;Some other option&lt;/li&gt;\n    &lt;/ul&gt;\n\n&lt;/body&gt;\n</code></pre><p></html><br>注意示例中调用的 super() 方法，此方法用于获取父模板中渲染的内容。</p>\n<p>As partials, the path set to &quot;extends&quot; is a relative path under the current views directory (i.e. app/views/).</p>\n<p>通常情况下，出于性能方面的考虑，Volt模板引擎在重新编译模板时只会检查子模板中的内容变更。 所以建议设置Volt模板引擎的选项参数 &#39;compileAlways&#39; =&gt; true。这样模板会实时编译，并检查父模板中的内容变更。<br>自动编码模式（Autoescape mode）</p>\n<p>You can enable auto-escaping of all variables printed in a block using the autoescape mode:</p>\n<p>Manually escaped: {{ robot.name|e }}</p>\n<p>{% autoescape true %}<br>    Autoescaped: {{ robot.name }}<br>    {% autoescape false %}<br>        No Autoescaped: {{ robot.name }}<br>    {% endautoescape %}<br>{% endautoescape %}<br>扩展 Volt（Extending Volt）</p>\n<p>Unlike other template engines, Volt itself is not required to run the compiled templates. Once the templates are compiled there is no dependence on Volt. With performance independence in mind, Volt only acts as a compiler for PHP templates.</p>\n<p>The Volt compiler allow you to extend it adding more functions, tests or filters to the existing ones.</p>\n<p>函数（Functions）</p>\n<p>Functions act as normal PHP functions, a valid string name is required as function name. Functions can be added using two strategies, returning a simple string or using an anonymous function. Always is required that the chosen strategy returns a valid PHP string expression:</p>\n<p>&lt;?php</p>\n<p>use Phalcon\\Mvc\\View\\Engine\\Volt;</p>\n<p>$volt = new Volt($view, $di);</p>\n<p>$compiler = $volt-&gt;getCompiler();</p>\n<p>// This binds the function name &#39;shuffle&#39; in Volt to the PHP function &#39;str_shuffle&#39;<br>$compiler-&gt;addFunction(&quot;shuffle&quot;, &quot;str_shuffle&quot;);<br>Register the function with an anonymous function. This case we use $resolvedArgs to pass the arguments exactly as were passed in the arguments:</p>\n<p>&lt;?php</p>\n<p>$compiler-&gt;addFunction(<br>    &quot;widget&quot;,<br>    function ($resolvedArgs, $exprArgs) {<br>        return &quot;MyLibrary\\Widgets::get(&quot; . $resolvedArgs . &quot;)&quot;;<br>    }<br>);<br>Treat the arguments independently and unresolved:</p>\n<p>&lt;?php</p>\n<p>$compiler-&gt;addFunction(<br>    &quot;repeat&quot;,<br>    function ($resolvedArgs, $exprArgs) use ($compiler) {<br>        // Resolve the first argument<br>        $firstArgument = $compiler-&gt;expression($exprArgs[0][&#39;expr&#39;]);</p>\n<pre><code>    // Checks if the second argument was passed\n    if (isset($exprArgs[1])) {\n        $secondArgument = $compiler-&gt;expression($exprArgs[1][&#39;expr&#39;]);\n    } else {\n        // Use &#39;10&#39; as default\n        $secondArgument = &#39;10&#39;;\n    }\n\n    return &quot;str_repeat(&quot; . $firstArgument . &quot;, &quot; . $secondArgument . &quot;)&quot;;\n}\n</code></pre><p>);<br>Generate the code based on some function availability:</p>\n<p>&lt;?php</p>\n<p>$compiler-&gt;addFunction(<br>    &quot;contains_text&quot;,<br>    function ($resolvedArgs, $exprArgs) {<br>        if (function_exists(&quot;mb_stripos&quot;)) {<br>            return &quot;mb_stripos(&quot; . $resolvedArgs . &quot;)&quot;;<br>        } else {<br>            return &quot;stripos(&quot; . $resolvedArgs . &quot;)&quot;;<br>        }<br>    }<br>);<br>Built-in functions can be overridden adding a function with its name:</p>\n<p>&lt;?php</p>\n<p>// Replace built-in function dump<br>$compiler-&gt;addFunction(&quot;dump&quot;, &quot;print_r&quot;);<br>过滤器（Filters）</p>\n<p>A filter has the following form in a template: leftExpr|name(optional-args). Adding new filters is similar as seen with the functions:</p>\n<p>&lt;?php</p>\n<p>// This creates a filter &#39;hash&#39; that uses the PHP function &#39;md5&#39;<br>$compiler-&gt;addFilter(&quot;hash&quot;, &quot;md5&quot;);<br>&lt;?php</p>\n<p>$compiler-&gt;addFilter(<br>    &quot;int&quot;,<br>    function ($resolvedArgs, $exprArgs) {<br>        return &quot;intval(&quot; . $resolvedArgs . &quot;)&quot;;<br>    }<br>);<br>Built-in filters can be overridden adding a function with its name:</p>\n<p>&lt;?php</p>\n<p>// Replace built-in filter &#39;capitalize&#39;<br>$compiler-&gt;addFilter(&quot;capitalize&quot;, &quot;lcfirst&quot;);<br>扩展（Extensions）</p>\n<p>With extensions the developer has more flexibility to extend the template engine, and override the compilation of a specific instruction, change the behavior of an expression or operator, add functions/filters, and more.</p>\n<p>An extension is a class that implements the events triggered by Volt as a method of itself.</p>\n<p>For example, the class below allows to use any PHP function in Volt:</p>\n<p>&lt;?php</p>\n<p>class PhpFunctionExtension<br>{<br>    /**</p>\n<pre><code> * This method is called on any attempt to compile a function call\n */\npublic function compileFunction($name, $arguments)\n{\n    if (function_exists($name)) {\n        return $name . &quot;(&quot;. $arguments . &quot;)&quot;;\n    }\n}\n</code></pre><p>}<br>The above class implements the method &#39;compileFunction&#39; which is invoked before any attempt to compile a function call in any template. The purpose of the extension is to verify if a function to be compiled is a PHP function allowing to call it from the template. Events in extensions must return valid PHP code, this will be used as result of the compilation instead of the one generated by Volt. If an event doesn&#39;t return an string the compilation is done using the default behavior provided by the engine.</p>\n<p>The following compilation events are available to be implemented in extensions:</p>\n<p>Event/Method    Description<br>compileFunction    Triggered before trying to compile any function call in a template<br>compileFilter    Triggered before trying to compile any filter call in a template<br>resolveExpression    Triggered before trying to compile any expression. This allows the developer to override operators<br>compileStatement    Triggered before trying to compile any expression. This allows the developer to override any statement<br>Volt extensions must be in registered in the compiler making them available in compile time:</p>\n<p>&lt;?php</p>\n<p>// Register the extension in the compiler<br>$compiler-&gt;addExtension(<br>    new PhpFunctionExtension()<br>);<br>缓存视图片段（Caching view fragments）</p>\n<p>With Volt it&#39;s easy cache view fragments. This caching improves performance preventing that the contents of a block from being executed by PHP each time the view is displayed:</p>\n<p>{% cache &quot;sidebar&quot; %}<br>    <!-- generate this content is slow so we are going to cache it --><br>{% endcache %}<br>Setting a specific number of seconds:</p>\n<p>{# cache the sidebar by 1 hour #}<br>{% cache &quot;sidebar&quot; 3600 %}<br>    <!-- generate this content is slow so we are going to cache it --><br>{% endcache %}<br>Any valid expression can be used as cache key:</p>\n<p>{% cache (&quot;article-&quot; ~ post.id) 3600 %}</p>\n<pre><code>&lt;h1&gt;{{ post.title }}&lt;/h1&gt;\n\n&lt;p&gt;{{ post.content }}&lt;/p&gt;\n</code></pre><p>{% endcache %}<br>The caching is done by the :doc:<code>Phalcon\\\\Cache &lt;cache&gt;</code> component via the view component. Learn more about how this integration works in the section :doc:<code>&quot;Caching View Fragments&quot; &lt;views&gt;</code>.</p>\n<p>注入服务到模版（Inject Services into a Template）</p>\n<p>If a service container (DI) is available for Volt, you can use the services by only accessing the name of the service in the template:</p>\n<p>{# Inject the &#39;flash&#39; service #}</p>\n<div id=\"messages\">{{ flash.output() }}</div>\n\n<p>{# Inject the &#39;security&#39; service #}</p>\n<p><input type=\"hidden\" name=\"token\" value=\"{{ security.getToken() }}\"><br>独立的组件（Stand-alone component）</p>\n<p>Using Volt in a stand-alone mode can be demonstrated below:</p>\n<p>&lt;?php</p>\n<p>use Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler as VoltCompiler;</p>\n<p>// Create a compiler<br>$compiler = new VoltCompiler();</p>\n<p>// Optionally add some options<br>$compiler-&gt;setOptions(<br>    [<br>        // ...<br>    ]<br>);</p>\n<p>// Compile a template string returning PHP code<br>echo $compiler-&gt;compileString(<br>    &quot;{{ &#39;hello&#39; }}&quot;<br>);</p>\n<p>// Compile a template in a file specifying the destination file<br>$compiler-&gt;compileFile(<br>    &quot;layouts/main.volt&quot;,<br>    &quot;cache/layouts/main.volt.php&quot;<br>);</p>\n<p>// Compile a template in a file based on the options passed to the compiler<br>$compiler-&gt;compile(<br>    &quot;layouts/main.volt&quot;<br>);</p>\n<p>// Require the compiled templated (optional)<br>require $compiler-&gt;getCompiledTemplatePath();<br>外部资源（External Resources）</p>\n<p>A bundle for Sublime/Textmate is available here<br>Album-O-Rama is a sample application using Volt as template engine, [Album-O-Rama on Github]<br>Our website is running using Volt as template engine, [Our website on Github]<br>Phosphorum, the Phalcon&#39;s forum, also uses Volt, [Phosphorum on Github]<br>Vökuró, is another sample application that use Volt, [Vökuró on Github]</p>\n', '2017-12-12 15:44:28', '16', '0');
INSERT INTO `t_article` VALUES ('22', 'Write operations are not allowed in read-only mode (FlushMode.MANUAL)  ', '<p>阿三大实打实打大大苏打实打实的撒大苏打实打实阿萨大大</p>\n', '2017-12-13 19:33:11', '13', '0');
INSERT INTO `t_article` VALUES ('28', '访问控制列表 ACL（Access Control Lists ACL） ', '<p>Phalcon在权限方面通过 :doc:<code>Phalcon\\Acl &lt;../api/Phalcon_Acl&gt;</code> 提供了一个轻量级的 ACL(访问控制列表). Access Control Lists (ACL) 允许系统对用户的访问权限进行控制，比如允许访问某些资源而不允许访问其它资源等。 这里我们建议开发者了解一些关于ACL的技术。</p><br><p>ACL有两部分组成即角色和资源。 资源即是ACL定义的权限所依附的对象。 角色即是ACL所字义的请求者的身份，ACL决定了角色对资源的访问权限，允许访问或拒绝访问。</p><br><p><strong>创建 ACL（Creating an ACL）</strong></p><br><p>这个组件起先是设计工作在内存中的， 这样做提供了更高的访问速度。 :doc:<code>Phalcon\\Acl &lt;../api/Phalcon_Acl&gt;</code> 构造器的第一个参数用于设置取得ACL的方式。 下面是使用内存适配器的例子：</p><br><blockquote><br><p>&lt;?php</p><br><p>use Phalcon\\Acl\\Adapter\\Memory as AclList;</p><br><p>$acl = new AclList();<br>默认情况下 :doc:<code>Phalcon\\Acl &lt;../api/Phalcon_Acl&gt;</code> 允许我们访问未定义的资源中的action，为了提高安全性， 我们设置默认访问级别为‘拒绝’。</p><br></blockquote><br><p>&lt;?php</p><br><p>use Phalcon\\Acl;</p><br><p>// 设置默认访问级别为拒绝<br>$acl-&gt;setDefaultAction(<br>    Acl::DENY<br>);<br>添加角色（Adding Roles to the ACL）</p><br><p>角色即是权限的集合体，其中定义了我们对资源的访问权限。 例如， 我们会把一个组织内的不同的人定义为不同的角色。 The :doc:<code>Phalcon\\Acl\\Role &lt;../api/Phalcon_Acl_Role&gt;</code> 类使用一种更有组织的方式来定义角色。 这里我们创建一些角色：</p><br><p>&lt;?php</p><br><p>use Phalcon\\Acl\\Role;</p><br><p>// 创建角色<br>// The first parameter is the name, the second parameter is an optional description.<br>$roleAdmins = new Role(&quot;Administrators&quot;, &quot;Super-User role&quot;);<br>$roleGuests = new Role(&quot;Guests&quot;);</p><br><p>// 添加 &quot;Guests&quot; 角色到ACL<br>$acl-&gt;addRole($roleGuests);</p><br><p>// 添加&quot;Designers&quot;到ACL, 仅使用此字符串。<br>$acl-&gt;addRole(&quot;Designers&quot;);<br>上面我们看到，我们可以直接使用字符串来定义角色。</p><br><p>添加资源（Adding Resources）</p><br><p>资源即是访问控制要控制的对象之一。 正常情况下在mvc中资源一般是控制器。 Phalcon中我们使用 :doc:<code>Phalcon\\Acl\\Resource &lt;../api/Phalcon_Acl_Resource&gt;</code> 来定义资源。 非常重要的一点即是我们把相关的action或操作添加到资源中这样ACL才知道控制什么资源。</p><br><p>&lt;?php</p><br><p>use Phalcon\\Acl\\Resource;</p><br><p>// 定义 &quot;Customers&quot; 资源<br>$customersResource = new Resource(&quot;Customers&quot;);</p><br><p>// 为 &quot;customers&quot;资源添加一组操作</p><br><p>$acl-&gt;addResource(<br>    $customersResource,<br>    &quot;search&quot;<br>);</p><br><p>$acl-&gt;addResource(<br>    $customersResource,<br>    [<br>        &quot;create&quot;,<br>        &quot;update&quot;,<br>    ]<br>);<br>定义访问控制（Defining Access Controls）</p><br><p>至此我们定义了角色及资源， 现在是定义ACL的时候了，即是定义角色对资源的访问。 这个部分是极其重要的，特别是在我们设定了默认的访问级别后。</p><br><p>&lt;?php</p><br><p>// 设置角色对资源的访问级别<br>$acl-&gt;allow(&quot;Guests&quot;, &quot;Customers&quot;, &quot;search&quot;);</p><br><p>$acl-&gt;allow(&quot;Guests&quot;, &quot;Customers&quot;, &quot;create&quot;);</p><br><p>$acl-&gt;deny(&quot;Guests&quot;, &quot;Customers&quot;, &quot;update&quot;);<br>allow()方法指定了允许角色对资源的访问， deny()方法则反之。</p><br><p>查询 ACL（Querying an ACL）</p><br><p>一旦访问控制表定义之后， 我们就可以通过它来检查角色是否有访问权限了。</p><br><p>&lt;?php</p><br><p>// 查询角色是否有访问权限</p><br><p>// Returns 0<br>$acl-&gt;isAllowed(&quot;Guests&quot;, &quot;Customers&quot;, &quot;edit&quot;);</p><br><p>// Returns 1<br>$acl-&gt;isAllowed(&quot;Guests&quot;, &quot;Customers&quot;, &quot;search&quot;);</p><br><p>// Returns 1<br>$acl-&gt;isAllowed(&quot;Guests&quot;, &quot;Customers&quot;, &quot;create&quot;);<br>Function based access</p><br><p>Also you can add as 4th parameter your custom function which must return boolean value. It will be called when you use isAllowed() method. You can pass parameters as associative array to isAllowed() method as 4th argument where key is parameter name in our defined function.</p><br><p>&lt;?php<br>// Set access level for role into resources with custom function<br>$acl-&gt;allow(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;search&quot;,<br>    function ($a) {<br>        return $a % 2 === 0;<br>    }<br>);</p><br><p>// Check whether role has access to the operation with custom function</p><br><p>// Returns true<br>$acl-&gt;isAllowed(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;search&quot;,<br>    [<br>        &quot;a&quot; =&gt; 4,<br>    ]<br>);</p><br><p>// Returns false<br>$acl-&gt;isAllowed(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;search&quot;,<br>    [<br>        &quot;a&quot; =&gt; 3,<br>    ]<br>);<br>Also if you don&#39;t provide any parameters in isAllowed() method then default behaviour will be Acl::ALLOW. You can change it by using method setNoArgumentsDefaultAction().</p><br><p>use Phalcon\\Acl;</p><br><p>&lt;?php<br>// Set access level for role into resources with custom function<br>$acl-&gt;allow(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;search&quot;,<br>    function ($a) {<br>        return $a % 2 === 0;<br>    }<br>);</p><br><p>// Check whether role has access to the operation with custom function</p><br><p>// Returns true<br>$acl-&gt;isAllowed(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;search&quot;<br>);</p><br><p>// Change no arguments default action<br>$acl-&gt;setNoArgumentsDefaultAction(<br>    Acl::DENY<br>);</p><br><p>// Returns false<br>$acl-&gt;isAllowed(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;search&quot;<br>);<br>Objects as role name and resource name</p><br><p>You can pass objects as roleName and resourceName. Your classes must implement :doc:<code>Phalcon\\Acl\\RoleAware &lt;../api/Phalcon_Acl_RoleAware&gt;</code> for roleName and :doc:<code>Phalcon\\Acl\\ResourceAware &lt;../api/Phalcon_Acl_ResourceAware&gt;</code> for resourceName.</p><br><p>Our UserRole class</p><br><p>&lt;?php</p><br><p>use Phalcon\\Acl\\RoleAware;</p><br><p>// Create our class which will be used as roleName<br>class UserRole implements RoleAware<br>{<br>    protected $id;</p><br><pre><code>protected $roleName;<br><br>public function <strong>construct($id, $roleName)<br>{<br>    $this-&gt;id       = $id;<br>    $this-&gt;roleName = $roleName;<br>}<br><br>public function getId()<br>{<br>    return $this-&gt;id;<br>}<br><br>// Implemented function from RoleAware Interface<br>public function getRoleName()<br>{<br>    return $this-&gt;roleName;<br>}<br></code></pre><p>}<br>And our ModelResource class</p><br><p>&lt;?php</p><br><p>use Phalcon\\Acl\\ResourceAware;</p><br><p>// Create our class which will be used as resourceName<br>class ModelResource implements ResourceAware<br>{<br>    protected $id;</p><br><pre><code>protected $resourceName;<br><br>protected $userId;<br><br>public function </strong>construct($id, $resourceName, $userId)<br>{<br>    $this-&gt;id           = $id;<br>    $this-&gt;resourceName = $resourceName;<br>    $this-&gt;userId       = $userId;<br>}<br><br>public function getId()<br>{<br>    return $this-&gt;id;<br>}<br><br>public function getUserId()<br>{<br>    return $this-&gt;userId;<br>}<br><br>// Implemented function from ResourceAware Interface<br>public function getResourceName()<br>{<br>    return $this-&gt;resourceName;<br>}<br></code></pre><p>}<br>Then you can use them in isAllowed() method.</p><br><p>&lt;?php</p><br><p>use UserRole;<br>use ModelResource;</p><br><p>// Set access level for role into resources<br>$acl-&gt;allow(&quot;Guests&quot;, &quot;Customers&quot;, &quot;search&quot;);<br>$acl-&gt;allow(&quot;Guests&quot;, &quot;Customers&quot;, &quot;create&quot;);<br>$acl-&gt;deny(&quot;Guests&quot;, &quot;Customers&quot;, &quot;update&quot;);</p><br><p>// Create our objects providing roleName and resourceName</p><br><p>$customer = new ModelResource(<br>    1,<br>    &quot;Customers&quot;,<br>    2<br>);</p><br><p>$designer = new UserRole(<br>    1,<br>    &quot;Designers&quot;<br>);</p><br><p>$guest = new UserRole(<br>    2,<br>    &quot;Guests&quot;<br>);</p><br><p>$anotherGuest = new UserRole(<br>    3,<br>    &quot;Guests&quot;<br>);</p><br><p>// Check whether our user objects have access to the operation on model object</p><br><p>// Returns false<br>$acl-&gt;isAllowed(<br>    $designer,<br>    $customer,<br>    &quot;search&quot;<br>);</p><br><p>// Returns true<br>$acl-&gt;isAllowed(<br>    $guest,<br>    $customer,<br>    &quot;search&quot;<br>);</p><br><p>// Returns true<br>$acl-&gt;isAllowed(<br>    $anotherGuest,<br>    $customer,<br>    &quot;search&quot;<br>);<br>Also you can access those objects in your custom function in allow() or deny(). They are automatically bind to parameters by type in function.</p><br><p>&lt;?php</p><br><p>use UserRole;<br>use ModelResource;</p><br><p>// Set access level for role into resources with custom function<br>$acl-&gt;allow(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;search&quot;,<br>    function (UserRole $user, ModelResource $model) { // User and Model classes are necessary<br>        return $user-&gt;getId == $model-&gt;getUserId();<br>    }<br>);</p><br><p>$acl-&gt;allow(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;create&quot;<br>);</p><br><p>$acl-&gt;deny(<br>    &quot;Guests&quot;,<br>    &quot;Customers&quot;,<br>    &quot;update&quot;<br>);</p><br><p>// Create our objects providing roleName and resourceName</p><br><p>$customer = new ModelResource(<br>    1,<br>    &quot;Customers&quot;,<br>    2<br>);</p><br><p>$designer = new UserRole(<br>    1,<br>    &quot;Designers&quot;<br>);</p><br><p>$guest = new UserRole(<br>    2,<br>    &quot;Guests&quot;<br>);</p><br><p>$anotherGuest = new UserRole(<br>    3,<br>    &quot;Guests&quot;<br>);</p><br><p>// Check whether our user objects have access to the operation on model object</p><br><p>// Returns false<br>$acl-&gt;isAllowed(<br>    $designer,<br>    $customer,<br>    &quot;search&quot;<br>);</p><br><p>// Returns true<br>$acl-&gt;isAllowed(<br>    $guest,<br>    $customer,<br>    &quot;search&quot;<br>);</p><br><p>// Returns false<br>$acl-&gt;isAllowed(<br>    $anotherGuest,<br>    $customer,<br>    &quot;search&quot;<br>);<br>You can still add any custom parameters to function and pass associative array in isAllowed() method. Also order doesn&#39;t matter.</p><br><p>角色继承（Roles Inheritance）</p><br><p>我们可以使用 :doc:<code>Phalcon\\Acl\\Role &lt;../api/Phalcon_Acl_Role&gt;</code> 提供的继承机制来构造更复杂的角色。 Phalcon中的角色可以继承来自其它角色的 权限, 这样就可以实现更巧妙的资源访问控制。 如果要继承权限用户， 我们需要在添加角色函数的第二个参数中写上要继承的那个角色实例。</p><br><p>&lt;?php</p><br><p>use Phalcon\\Acl\\Role;</p><br><p>// ...</p><br><p>// 创建角色</p><br><p>$roleAdmins = new Role(&quot;Administrators&quot;, &quot;Super-User role&quot;);</p><br><p>$roleGuests = new Role(&quot;Guests&quot;);</p><br><p>// 添加 &quot;Guests&quot; 到 ACL<br>$acl-&gt;addRole($roleGuests);</p><br><p>// 使Administrators继承Guests的访问权限<br>$acl-&gt;addRole($roleAdmins, $roleGuests);<br>序列化 ACL 列表（Serializing ACL lists）</p><br><p>为了提高性能， :doc:<code>Phalcon\\Acl &lt;../api/Phalcon_Acl&gt;</code> 的实例可以被实例化到APC, session， 文本或数据库中， 这样开发者就不需要重复的 定义acl了。 下面展示了如何去做：</p><br><p>&lt;?php</p><br><p>use Phalcon\\Acl\\Adapter\\Memory as AclList;</p><br><p>// ...</p><br><p>// 检查ACL数据是否存在<br>if (!is_file(&quot;app/security/acl.data&quot;)) {<br>    $acl = new AclList();</p><br><pre><code>// ... Define roles, resources, access, etc<br><br>// 保存实例化的数据到文本文件中<br>file_put_contents(<br>    &quot;app/security/acl.data&quot;,<br>    serialize($acl)<br>);<br></code></pre><p>} else {<br>    // 返序列化<br>    $acl = unserialize(<br>        file_get_contents(&quot;app/security/acl.data&quot;)<br>    );<br>}</p><br><p>// 使用ACL<br>if ($acl-&gt;isAllowed(&quot;Guests&quot;, &quot;Customers&quot;, &quot;edit&quot;)) {<br>    echo &quot;Access granted!&quot;;<br>} else {<br>    echo &quot;Access denied :(&quot;;<br>}<br>It&#39;s recommended to use the Memory adapter during development and use one of the other adapters in production.</p><br><p>ACL 事件（ACL Events）</p><br><p>如果需要的话 :doc:<code>Phalcon\\Acl &lt;../api/Phalcon_Acl&gt;</code> 可以发送事件到 :doc:<code>EventsManager <events></code> 。 这里我们为acl绑定事件。 其中一些事件的处理结果如果返回了false则表示正在处理的操作会被中止。 支持如下的事件：</p><br><p>事件名    触发条件    能否中止操作<br>beforeCheckAccess    在权限检查之前触发    Yes<br>afterCheckAccess    在权限检查之后触发    No<br>下面的例子中展示了如何绑定事件到此组件：</p><br><p>&lt;?php</p><br><p>use Phalcon\\Acl\\Adapter\\Memory as AclList;<br>use Phalcon\\Events\\Event;<br>use Phalcon\\Events\\Manager as EventsManager;</p><br><p>// ...</p><br><p>// 创建事件管理器<br>$eventsManager = new EventsManager();</p><br><p>// 绑定事件类型为acl<br>$eventsManager-&gt;attach(<br>    &quot;acl:beforeCheckAccess&quot;,<br>    function (Event $event, $acl) {<br>        echo $acl-&gt;getActiveRole();</p><br><pre><code>    echo $acl-&gt;getActiveResource();<br><br>    echo $acl-&gt;getActiveAccess();<br>}<br></code></pre><p>);</p><br><p>$acl = new AclList();</p><br><p>// Setup the $acl<br>// ...</p><br><p>// 绑定eventsManager到ACL组件<br>$acl-&gt;setEventsManager($eventsManager);<br>自定义适配器（Implementing your own adapters）</p><br><p>开发者要创建自己的扩展或已存在适配器则需要实现此 :doc:<code>Phalcon\\Acl\\AdapterInterface &lt;../api/Phalcon_Acl_AdapterInterface&gt;</code> 接口。</p>\n', '2017-12-15 19:17:36', '23', '0');
INSERT INTO `t_article` VALUES ('31', 'hibernate 注解字段默认值', '<p>hibernate 注解字段默认值的设置:</p>\n<blockquote>\n<pre><code>     @Column(name=&quot;ISPUBLIC&quot; ,nullable=false,columnDefinition=&quot;INT default 0&quot;)\n private int isPublic;\n</code></pre></blockquote>\n<p>注意字段的类型必须指定，因为hibernate 会把columnDefinition 的内容直接写在生成标的ddl中，因此语法必须正确。</p>\n', '2017-12-17 21:07:47', '23', '0');
INSERT INTO `t_article` VALUES ('32', 'Hibernate利用@DynamicInsert和@DynamicUpdate生成动态SQL语句', '<p>**@DynamicInsert属性:设置为true,设置为true,表示insert对象的时候,生成动态的insert语句,如果这个字段的值是null就不会加入到insert语句当中.默认false。</p>\n<p>比如希望数据库插入日期或时间戳字段时，在对象字段为空的情况下，表字段能自动填写当前的sysdate。</p>\n<p>@DynamicUpdate属性:设置为true,设置为true,表示update对象的时候,生成动态的update语句,如果这个字段的值是null就不会被加入到update语句中,默认false。</p>\n<p>比如只想更新某个属性，但是却把整个对象的属性都更新了，这并不是我们希望的结果，我们希望的结果是：我更改了哪些字段，只要更新我修改的字段就够了。**</p>\n', '2017-12-17 21:11:44', '23', '0');

-- ----------------------------
-- Table structure for t_book_list
-- ----------------------------
DROP TABLE IF EXISTS `t_book_list`;
CREATE TABLE `t_book_list` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `book_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `book_review` text COLLATE utf8_unicode_ci,
  `craete_by` int(11) NOT NULL COMMENT '创建者id',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of t_book_list
-- ----------------------------

-- ----------------------------
-- Table structure for t_chat
-- ----------------------------
DROP TABLE IF EXISTS `t_chat`;
CREATE TABLE `t_chat` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '消息id',
  `content` text COLLATE utf8_unicode_ci COMMENT '内容 ',
  `create_at` datetime NOT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '创建时间',
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `CHAT_PK_USERID` (`user_id`),
  CONSTRAINT `CHAT_PK_USERID` FOREIGN KEY (`user_id`) REFERENCES `t_users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of t_chat
-- ----------------------------
INSERT INTO `t_chat` VALUES ('1', '我是1号', '2017-12-14 09:51:55', '13');
INSERT INTO `t_chat` VALUES ('2', '我是23号', '2017-12-14 09:51:59', '14');
INSERT INTO `t_chat` VALUES ('3', '我是test', '2017-12-14 09:52:02', '16');
INSERT INTO `t_chat` VALUES ('4', '长城纸箱厂在', '2017-12-14 09:52:04', '13');
INSERT INTO `t_chat` VALUES ('5', '打发士大夫士大夫', '2017-12-14 09:52:07', '23');
INSERT INTO `t_chat` VALUES ('6', '43423', '2017-12-14 09:52:11', '15');
INSERT INTO `t_chat` VALUES ('7', '56456', '2017-12-14 09:52:14', '18');
INSERT INTO `t_chat` VALUES ('8', '5345345', '2017-12-14 09:52:17', '18');
INSERT INTO `t_chat` VALUES ('9', '法大师傅士大夫十分', '2017-12-14 12:09:56', '23');
INSERT INTO `t_chat` VALUES ('10', 'FDGFDFGHHGFD', '2017-12-16 00:39:45', '23');
INSERT INTO `t_chat` VALUES ('11', 'sadasdsad', '2017-12-16 00:41:51', '23');
INSERT INTO `t_chat` VALUES ('12', 'asdasdasd', '2017-12-16 00:42:13', '23');
INSERT INTO `t_chat` VALUES ('13', '富士康是开发', '2017-12-16 00:42:23', '23');
INSERT INTO `t_chat` VALUES ('14', '发顺丰', '2017-12-16 00:42:30', '23');
INSERT INTO `t_chat` VALUES ('15', '发顺丰', '2017-12-16 00:43:31', '23');
INSERT INTO `t_chat` VALUES ('16', 'dsadadasd', '2017-12-16 00:44:48', '13');
INSERT INTO `t_chat` VALUES ('17', '发顺丰', '2017-12-16 00:44:53', '23');
INSERT INTO `t_chat` VALUES ('18', '发顺丰', '2017-12-16 00:44:53', '23');
INSERT INTO `t_chat` VALUES ('19', 'dsadadasd', '2017-12-16 00:44:56', '13');
INSERT INTO `t_chat` VALUES ('20', 'dsadadasd', '2017-12-16 00:44:57', '13');
INSERT INTO `t_chat` VALUES ('21', 'dsadadasd', '2017-12-16 00:44:59', '13');
INSERT INTO `t_chat` VALUES ('22', 'dsadadasd', '2017-12-16 00:45:01', '13');
INSERT INTO `t_chat` VALUES ('23', 'dsadadasd', '2017-12-16 00:45:01', '13');
INSERT INTO `t_chat` VALUES ('24', 'dsadadasd', '2017-12-16 00:45:02', '13');
INSERT INTO `t_chat` VALUES ('25', 'dsadadasd', '2017-12-16 00:45:02', '13');
INSERT INTO `t_chat` VALUES ('26', 'dsadadasd', '2017-12-16 00:45:03', '13');
INSERT INTO `t_chat` VALUES ('27', 'dsadadasd', '2017-12-16 00:45:03', '13');
INSERT INTO `t_chat` VALUES ('28', 'dsadadasd', '2017-12-16 00:45:03', '13');
INSERT INTO `t_chat` VALUES ('29', 'dsadadasd', '2017-12-16 00:45:04', '13');
INSERT INTO `t_chat` VALUES ('30', 'dsadadasd', '2017-12-16 00:45:04', '13');
INSERT INTO `t_chat` VALUES ('31', 'dsadadasd', '2017-12-16 00:45:05', '13');
INSERT INTO `t_chat` VALUES ('32', 'dsadadasd', '2017-12-16 00:45:05', '13');
INSERT INTO `t_chat` VALUES ('33', 'dsadadasd', '2017-12-16 00:45:05', '13');
INSERT INTO `t_chat` VALUES ('34', 'dsadadasd', '2017-12-16 00:45:06', '13');
INSERT INTO `t_chat` VALUES ('35', 'dsadadasd', '2017-12-16 00:45:06', '13');
INSERT INTO `t_chat` VALUES ('36', 'dsadadasd', '2017-12-16 00:45:07', '13');
INSERT INTO `t_chat` VALUES ('37', 'dsadadasd', '2017-12-16 00:45:07', '13');
INSERT INTO `t_chat` VALUES ('38', 'dsadadasd', '2017-12-16 00:45:08', '13');
INSERT INTO `t_chat` VALUES ('39', '撒打算', '2017-12-17 21:03:25', '23');
INSERT INTO `t_chat` VALUES ('40', '撒打算', '2017-12-17 21:03:37', '23');
INSERT INTO `t_chat` VALUES ('41', '撒打算', '2017-12-17 21:03:41', '23');

-- ----------------------------
-- Table structure for t_child_module
-- ----------------------------
DROP TABLE IF EXISTS `t_child_module`;
CREATE TABLE `t_child_module` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '子模块id',
  `module_name` varchar(20) COLLATE utf8_unicode_ci NOT NULL COMMENT '子模块名称',
  `url` varchar(20) COLLATE utf8_unicode_ci NOT NULL COMMENT 'url',
  `parent_id` int(11) DEFAULT NULL COMMENT '父级模块id',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of t_child_module
-- ----------------------------

-- ----------------------------
-- Table structure for t_groups
-- ----------------------------
DROP TABLE IF EXISTS `t_groups`;
CREATE TABLE `t_groups` (
  `id` int(10) NOT NULL AUTO_INCREMENT COMMENT '组编号',
  `group_name` varchar(20) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '组名',
  `leader_id` int(10) NOT NULL,
  `create_at` date DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of t_groups
-- ----------------------------
INSERT INTO `t_groups` VALUES ('23', 'dddd', '13', '2017-11-30');
INSERT INTO `t_groups` VALUES ('25', 'sadasd', '13', null);
INSERT INTO `t_groups` VALUES ('26', 'sdadas', '18', null);

-- ----------------------------
-- Table structure for t_message
-- ----------------------------
DROP TABLE IF EXISTS `t_message`;
CREATE TABLE `t_message` (
  `id` int(10) NOT NULL AUTO_INCREMENT COMMENT '消息编号',
  `content` varchar(255) COLLATE utf8_unicode_ci NOT NULL COMMENT '消息内容',
  `type` int(10) DEFAULT NULL COMMENT '消息类型',
  `status` int(10) DEFAULT NULL COMMENT '状态(0：已处理，1：处理)',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of t_message
-- ----------------------------
INSERT INTO `t_message` VALUES ('3', '1543427148@qq.com', null, null);

-- ----------------------------
-- Table structure for t_parent_module
-- ----------------------------
DROP TABLE IF EXISTS `t_parent_module`;
CREATE TABLE `t_parent_module` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '父级模块id',
  `module_name` varchar(20) COLLATE utf8_unicode_ci NOT NULL COMMENT '父级模块名称',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of t_parent_module
-- ----------------------------

-- ----------------------------
-- Table structure for t_project
-- ----------------------------
DROP TABLE IF EXISTS `t_project`;
CREATE TABLE `t_project` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '记录id',
  `project_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL COMMENT '项目名',
  `group_id` int(11) NOT NULL COMMENT '组id',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of t_project
-- ----------------------------

-- ----------------------------
-- Table structure for t_rating
-- ----------------------------
DROP TABLE IF EXISTS `t_rating`;
CREATE TABLE `t_rating` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '记录id',
  `part_1` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `part_2` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `part_3` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `project_id` int(11) NOT NULL COMMENT '项目id',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of t_rating
-- ----------------------------

-- ----------------------------
-- Table structure for t_recommend
-- ----------------------------
DROP TABLE IF EXISTS `t_recommend`;
CREATE TABLE `t_recommend` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '最佳者id',
  `best_id` int(11) NOT NULL,
  `referrer_id` int(11) NOT NULL COMMENT '推荐者id',
  `votes` int(11) NOT NULL DEFAULT '0' COMMENT '得票数',
  `activity_id` int(11) NOT NULL COMMENT '活动id',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of t_recommend
-- ----------------------------

-- ----------------------------
-- Table structure for t_roles
-- ----------------------------
DROP TABLE IF EXISTS `t_roles`;
CREATE TABLE `t_roles` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '角色编号',
  `role_name` varchar(20) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '角色名称',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of t_roles
-- ----------------------------
INSERT INTO `t_roles` VALUES ('1', '超级管理员');
INSERT INTO `t_roles` VALUES ('2', '组长');
INSERT INTO `t_roles` VALUES ('3', '组员');

-- ----------------------------
-- Table structure for t_task
-- ----------------------------
DROP TABLE IF EXISTS `t_task`;
CREATE TABLE `t_task` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '任务id',
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '任务名',
  `description` text COLLATE utf8_unicode_ci COMMENT '任务内容描述',
  `status` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '未完成' COMMENT '任务状态',
  `receiver_id` int(11) DEFAULT NULL COMMENT '接受者id',
  `post_id` int(11) DEFAULT NULL COMMENT '发布者id',
  `create_at` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '发布时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of t_task
-- ----------------------------
INSERT INTO `t_task` VALUES ('1', '聊天室', '同一个小组的成员，可以进入聊天室进行实时交流', '已完成', '15', '23', '2017-12-17 19:36:32');
INSERT INTO `t_task` VALUES ('2', '博客系统', '.每位成员可以撰写博文，可以对博文设置查看权限，有查看权限的用户可以评论和回复', '已完成', '13', '23', '2017-12-17 19:36:32');
INSERT INTO `t_task` VALUES ('3', '任务管理系统', '组长可以创建任务清单，并分配给小组成员，组长可以跟踪任务完成情况', '正在进行中', '14', '23', '2017-12-17 19:36:32');
INSERT INTO `t_task` VALUES ('4', '推荐系统', '组长可以推荐本组一名成员，成为最佳程序猿/媛候选人，登录用户可以进行投票，并产生前三名', '正在进行中', '17', '23', '2017-12-17 19:36:32');
INSERT INTO `t_task` VALUES ('5', '书单', '小组成员可以创建书单计划，可以写书评，同组成员可以相互看对方书单', '正在进行中', '18', '23', '2017-12-17 19:36:32');
INSERT INTO `t_task` VALUES ('6', '.项目打分功能', '组长可以对其它小组的项目进行评分，评分的项目（系统功能、技术难易等）可以自定义', '正在进行中', '16', '23', '2017-12-17 19:36:32');

-- ----------------------------
-- Table structure for t_users
-- ----------------------------
DROP TABLE IF EXISTS `t_users`;
CREATE TABLE `t_users` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '用户编号',
  `email` varchar(20) COLLATE utf8_unicode_ci NOT NULL COMMENT '用户邮箱',
  `password` varchar(50) COLLATE utf8_unicode_ci NOT NULL COMMENT '用户密码',
  `name` varchar(50) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '用户昵称',
  `role_id` int(10) DEFAULT '3' COMMENT '用户角色编号',
  `group_id` int(10) DEFAULT '0' COMMENT '用户属组编号',
  `create_at` datetime NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`),
  KEY `Ref31` (`role_id`),
  KEY `Ref26` (`group_id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of t_users
-- ----------------------------
INSERT INTO `t_users` VALUES ('13', '1543427148@qq.com', '698d51a19d8a121ce581499d7b701668', '黄凌淞', '3', '19', '2017-11-18 00:00:00');
INSERT INTO `t_users` VALUES ('14', '467627195@qq.com', '698d51a19d8a121ce581499d7b701668', '张彦琳', '3', '19', '2017-11-18 00:00:00');
INSERT INTO `t_users` VALUES ('15', 'dove@qq.com', '698d51a19d8a121ce581499d7b701668', '郑可心', '3', '19', '2017-11-18 00:00:00');
INSERT INTO `t_users` VALUES ('16', '1394519111@qq.com', '698d51a19d8a121ce581499d7b701668', '兰嘉琪', '3', '19', '2017-11-18 00:00:00');
INSERT INTO `t_users` VALUES ('17', '1765678818@qq.com', '698d51a19d8a121ce581499d7b701668', '李启航', '3', '19', '2017-11-18 00:00:00');
INSERT INTO `t_users` VALUES ('18', '1357121973@1qq.com', '698d51a19d8a121ce581499d7b701668', '李开源', '3', '19', '2017-11-18 00:00:00');
INSERT INTO `t_users` VALUES ('23', '111@qq.com', '698d51a19d8a121ce581499d7b701668', '超级管理员', '1', '0', '2017-12-03 00:00:00');
SET FOREIGN_KEY_CHECKS=1;
